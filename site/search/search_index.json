{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Kalp Studio Landing Page Welcome to Kalp Studio Documentation!                  Dive headfirst into Web 3.0 development with Kalp Studio! Our user-friendly documentation equips you with everything you need to unlock the potential of the Kalp DLT.                                   Kalp studio empowers developers of all skill levels to navigate the exciting realm of Web 3.0 development using the robust Kalp DLT. It leverages a low-code approach, enabling both beginners and seasoned Web 2.0 developers to effortlessly create cutting-edge Web 3.0 applications or seamlessly extend existing applications into the decentralized world.                                              Build                                                         Getting started with Kalp Studio.                                                           Onboarding                                                              The onboarding process in kalp studio dashboard is designed to be seamless and user-friendly, guiding new users through the necessary steps to set up their accounts and begin using the platform effectively..                                                          Dashboard                                                         The kALP studio dashboard provides an all-in-one overview of your smart contract projects, giving you real-time insights and control over your operations.                                                         Billing                                                         The billing section allows you to manage your payment methods, view invoices, and track your subscription details.                                                         Credits                                                         Credits in kalp studio can be used to access various services and features on the platform.                                                     Kalp studio wallet                                                 The Kalp studio Wallet is a secure cryptocurrency wallet integrated within kalp studio, supporting multiple blockchain networks.                                                     Kalp instant deployer                                                         Kalp instant deployer (KID) streamlines the deployment of smart contracts, providing real-time tracking and secure management.                                                                  API gateway                                                                           The API gateway in kalp studio provides a centralized interface for managing and accessing your APIs.                                                                         Transaction monitoring                                                                       Transaction monitoring in kalp studio provides tools to track and analyze blockchain transactions in real time.                                                                     API key generation                                                                   API key generation in kalp studio enables you to create and manage keys for authenticating API requests.                                                               Learn                                                               Further your understanding of entire kalp studio ecosystem.                                                            Kalp studio overview                                                             Kalp studio is the leading blockchain infrastructure platform powering web3 developers worldwide. We are a team of engineers, designers and visionaries who are solving hard problems and creating a superior user experience in the world of blockchains.                                                         Kalp studio console dashboard                                                            Kalp studio console dashboard allows developers, businesses, and enthusiasts to build, manage, and scale blockchain applications with ease.                                                            Kalp DLT                                                                     The Kalp Decentralized Network (KDN) is a hybrid cross-chain ecosystem for secure tokenization of real-world assets. It uses KYC verification, a Distributed Certificate Authority, and SMART-BFT algorithms, featuring cross-chain interoperability to enhance liquidity and market reach.                                                       Kalp instant deployer                                                   Kalp instant deployer (KID) is a service designed to handle the deployment of smart contracts and track their status post-deployment.                                                  What is kalp studio wallet                                                           Kalp studio wallet is a versatile cryptocurrency wallet that supports multiple blockchain networks and offers various wallet types to cater to different user needs and security preferences.                                                   Kalp DLT developer resources                                                   For developers who know what they want to build and are ready to go with kalp DLT.                          Kalp SDK The Kalp SDK provides a robust set of tools and functionalities designed to streamline your development journey. Whether you're a seasoned blockchain developer or just starting your Web 3.0 exploration, the Kalp SDK offers a comprehensive solution to simplify building, deploying, and managing your decentralized applications (DApps). KRC Token standard KRC token standards serve as the foundation for creating a thriving and interoperable tokenized ecosystem on the Kalp DLT. By adhering to these standards, developers can build tokens that seamlessly integrate with various applications and services, fostering a vibrant environment of innovation and diverse functionalities. Write, Test, Deploy &amp; Interact Welcome to your comprehensive guide on building the backbone of decentralized applications \u2013 smart contracts. This guide empowers you to take control, from the initial spark of an idea to a fully-fledged blockchain implementation. Quick Start                   Are you ready to start building with kalp studio?                   How to Sign Up and Log In to Kalp studio Platform How to Create and Connect Wallet to kalp studio How to Deploy a Smart Contract on kalp studio How to generate API endpoints How to generate API key How can I monitor all my transactions"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/","title":"KRC 1155 Token Contract","text":""},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#krc1155-token-contract","title":"KRC1155 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-1155 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#overview","title":"Overview","text":"<p>This document outlines the technical details and functionalities of an KRC1155 token contract implemented in Go, utilizing the Kalp SDK for blockchain operations. The KRC1155 standard enables efficient multi-token transactions and interactions, supporting both fungible and non-fungible token types within a single contract.</p> <p>Prerequisites</p> <ul> <li> <p>Basic understanding of Go programming language.</p> </li> <li> <p>Familiarity with blockchain concepts, KRC1155 token standards, and smart contract development.</p> </li> <li> <p>KalpSDK environment set up for blockchain interaction.</p> </li> <li> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#contract-functions","title":"Contract Functions","text":""},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#initialize-function","title":"Initialize Function","text":"<p>Within the Kalp NFT contract, the <code>Initialize</code> method serves as a meticulous architect, establishing the foundational configurations that shape the contract's identity and functionality. It acts as a crucial starting point, ensuring essential parameters are set before any subsequent interactions can occur.</p> <pre><code>func (s *SmartContract) Initialize(sdk kalpsdk.TransactionContextInterface, name string, symbol string) (bool, error) {\n    // Initialization logic here\n}\n</code></pre> <p>Key Parameters:</p> <ul> <li> <p>name (string): The chosen title that will gracefully adorn the token collection, defining its unique character within the Kalp ecosystem.</p> </li> <li> <p>symbol (string): A concise and potent emblem that will serve as the collection's identifier, akin to a heraldic crest in the digital realm.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p>bool: A boolean value indicating the outcome of the initialization endeavor:</p> <ul> <li> <p>true: The initialization process has successfully crafted a solid foundation, and the contract is poised for further interactions.</p> </li> <li> <p>false: Unexpected challenges have derailed the initialization attempt, requiring attention and corrective measures.</p> </li> </ul> </li> <li> <p>error: If obstacles arose during initialization, an error object emerges, carrying valuable insights into the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#mint-function","title":"Mint Function","text":"<p>The <code>Mint</code> method acts as a powerful sculptor, meticulously crafting and issuing NFTs into existence. It serves as the cornerstone for NFT creation, enabling the minting of a designated number of tokens and assigning them to a specified recipient.</p> <pre><code>func (s *SmartContract) Mint(sdk kalpsdk.TransactionContextInterface, account string, id uint64, amount uint64) error {\n    // Minting logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>account (string): The blockchain address of the intended recipient who will receive the newly minted NFTs.</p> </li> <li> <p>id (uint64): A numerical identifier that serves as a starting point for minting a sequence of NFTs.</p> </li> <li> <p>amount (uint64): The precise number of NFTs to be minted and bestowed upon the recipient.</p> </li> </ul> <p>Return Value:error: In the event of unforeseen minting obstacles, an error object surfaces, shedding light on the nature of the difficulty. It is important to note that the method signature only explicitly indicates an error return type, implying a successful mint operation wouldn't return anything specific.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#mintbatch-function","title":"MintBatch Function","text":"<p>The <code>MintBatch</code> method embodies the spirit of efficiency, enabling the creation and allocation of multiple NFTs in a single, streamlined operation. It empowers the minting of diverse NFT types, each with its unique identifier and quantity, fostering a more efficient workflow for creators and distributors.</p> <pre><code>func (s *SmartContract) MintBatch(sdk kalpsdk.TransactionContextInterface, account string, ids []uint64, amounts []uint64) error {\n    // Batch minting logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>account (string): The blockchain address of the intended recipient who will receive the minted NFTs.</p> </li> <li> <p>ids ([]uint64): An array of numerical identifiers, meticulously assigned to each NFT within the batch, establishing their distinct identities.</p> </li> <li> <p>amounts ([]uint64): An array of corresponding values, precisely indicating the quantity of NFTs to be minted for each respective identifier within the batch.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#burn-function","title":"Burn Function","text":"<p>The <code>Burn</code> method serves as a transformative force, deliberately removing NFTs from existence and reducing their overall supply. It acts as a counterbalance to minting, fostering scarcity and potentially enhancing the value of remaining tokens.</p> <pre><code>func (s *SmartContract) Burn(sdk kalpsdk.TransactionContextInterface, account string, id uint64, amount uint64) error {\n    // Burning logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>account (string): The blockchain address of the individual or entity that will relinquish their ownership of the NFTs, triggering their removal.</p> </li> <li> <p>id (uint64): The unique numerical identifier that pinpoints the specific type of NFTs destined for the burning process.</p> </li> <li> <p>amount (uint64): The precise quantity of NFTs to be extracted from the account and irrevocably removed from circulation.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#burnbatch-function","title":"BurnBatch Function","text":"<p>The <code>BurnBatch</code> method embodies efficiency and precision, enabling the coordinated removal and destruction of multiple NFT types within a single, streamlined transaction. It serves as an optimized approach to managing NFT supply and unlocking various functionalities within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) BurnBatch(sdk kalpsdk.TransactionContextInterface, account string, ids []uint64, amounts []uint64) error {\n    // Batch burning logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>account (string): The blockchain address of the individual or entity relinquishing ownership of the NFTs, initiating their irreversible removal.</p> </li> <li> <p>ids ([]uint64): An array of unique numerical identifiers, meticulously pinpointing the distinct types of NFTs destined for the synchronized burning process.</p> </li> <li> <p>amounts ([]uint64): An array of corresponding values, precisely indicating the quantities of each respective NFT type to be extracted from the account and permanently extinguished.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#transferfrom-function","title":"TransferFrom Function","text":"<p>The <code>TransferFrom</code> method acts as a facilitator, enabling the seamless transfer of ownership for designated NFTs from one account to another. It empowers vibrant secondary markets and fosters dynamic ownership experiences within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) TransferFrom(sdk kalpsdk.TransactionContextInterface, sender string, recipient string, id uint64, amount uint64) error {\n    // Single transfer logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>sender (string): The blockchain address of the individual or entity relinquishing ownership of the NFTs, initiating the transfer process.</p> </li> <li> <p>recipient (string): The blockchain address of the intended recipient who will receive the NFTs and assume ownership.</p> </li> <li> <p>id (uint64): The unique numerical identifier pinpointing the specific type of NFTs to be transferred.</p> </li> <li> <p>amount (uint64): The precise quantity of NFTs to be extracted from the sender's account and bestowed upon the recipient.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#batchtransferfrom-function","title":"BatchTransferFrom Function","text":"<p>The <code>BatchTransferFrom</code> method embodies efficiency and coordination, enabling the seamless transfer of ownership for diverse NFT types within a single, streamlined transaction. It fosters efficient exchange processes, minimizing transaction costs and enhancing user experience.</p> <pre><code>func (s *SmartContract) BatchTransferFrom(sdk kalpsdk.TransactionContextInterface, sender string, recipient string, ids []uint64, amounts []uint64) error {\n    // Batch transfer logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>sender (string): The blockchain address of the individual or entity initiating the transfer, relinquishing ownership of the NFTs.</p> </li> <li> <p>recipient (string): The blockchain address of the intended recipient who will assume ownership of the transferred NFTs.</p> </li> <li> <p>ids ([]uint64): An array of unique numerical identifiers, pinpointing the precise types of NFTs to be included in the batch transfer.</p> </li> <li> <p>amounts ([]uint64): A corresponding array of values, specifying the quantities of each respective NFT type to be transferred.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#setapprovalforall-function","title":"SetApprovalForAll Function","text":"<p>The <code>SetApprovalForAll</code> method acts as a delegation tool, enabling granular control over NFT management permissions. It empowers users to grant or revoke the ability for a designated operator (often another smart contract) to transfer all their NFTs on their behalf.</p> <pre><code>func (s *SmartContract) SetApprovalForAll(sdk kalpsdk.TransactionContextInterface, operator string, approved bool) error {\n    // Approval logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>operator (string): The blockchain address of the operator (typically another smart contract) to whom permissions are being granted or revoked.</p> </li> <li> <p>approved (bool): A boolean value signifying the desired authorization state:</p> <ul> <li> <p>true : Grants the specified operator permission to manage all of the caller's NFTs.</p> </li> <li> <p>false : Revokes any previously granted permission for the operator to manage the caller's NFTs.  </p> </li> </ul> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#isapprovedforall-function","title":"IsApprovedForAll Function","text":"<p>the <code>IsApprovedForAll</code> method acts as a transparency tool, enabling users and other smart contracts to verify the authorization status of a designated operator. It empowers informed decision-making and fosters trust within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) IsApprovedForAll(sdk kalpsdk.TransactionContextInterface, account string, operator string) (bool, error) {\n    // Check approval status here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>account (string): The blockchain address of the NFT owner whose permissions are being queried.</p> </li> <li> <p>operator (string): The blockchain address of the operator whose authorization status is being investigated.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#balanceof-function","title":"BalanceOf Function","text":"<p>the <code>BalanceOf</code> method serves as a meticulous bookkeeper, enabling the querying of NFT balances associated with a specific account and token type. It provides a transparent and accessible way to ascertain digital asset ownership within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) BalanceOf(sdk kalpsdk.TransactionContextInterface, account string, id uint64) (uint64, error) {\n    // Balance query logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>account (string): The blockchain address of the account whose NFT balance is being investigated.</p> </li> <li> <p>id (uint64): The unique numerical identifier representing the specific type of NFTs for which the balance is sought.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#balanceofbatch-function","title":"BalanceOfBatch Function","text":"<p>The <code>BalanceOfBatch</code> method embodies optimization, enabling the efficient querying of NFT balances for multiple accounts and token types within a single operation. It streamlines data retrieval, minimizing transaction costs and enhancing user experience within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) BalanceOfBatch(sdk kalpsdk.TransactionContextInterface, accounts []string, ids []uint64) ([]uint64, error) {\n    // Batch balance query logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>accounts ([]string): An array of blockchain addresses representing the accounts for which NFT balances are being queried.</p> </li> <li> <p>ids ([]uint64): An array of unique numerical identifiers, each corresponding to a specific type of NFT for which balances are sought.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#helper-functions","title":"Helper Functions","text":"<p>Within the Kalp NFT smart contract, a suite of helper functions acts as the workhorses, meticulously handling fundamental operations. These functions encapsulate specific tasks, promoting code modularity, reusability, and maintainability.</p> <ul> <li> <p>Minting and Burning: Functions like <code>mintHelper</code>, <code>addBalance</code>, and <code>removeBalance</code> meticulously handle the creation and destruction of NFTs, ensuring accurate state updates and adherence to defined rules.</p> </li> <li> <p>Event Emissions: Dedicated functions manage the emission of events like <code>TransferSingle</code>, <code>TransferBatch</code>, and <code>ApprovalForAll</code>, keeping the Kalp ecosystem informed about crucial NFT-related activities.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#event-structures","title":"Event Structures","text":"<p>The contract meticulously defines event structures, serving as blueprints for the information broadcasted when events occur. These structures specify the data elements associated with each event, ensuring clarity and consistency in event communication:</p> <ul> <li> <p>Transfer Events: <code>TransferSingle</code> and <code>TransferBatch</code> events capture and broadcast details surrounding NFT transfers, including the sender, recipient, NFT type, and quantity.</p> </li> <li> <p>Approval Events: The <code>ApprovalForAll</code> event transmits information about changes in operator permissions, indicating which operator possesses the ability to manage the owner's NFTs.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#error-handling","title":"Error Handling","text":"<p>Robust error handling is a cornerstone of the contract, ensuring graceful management of exceptions and invalid operations. This includes:</p> <ul> <li> <p>Returning informative error objects: In case of unexpected issues, functions return error objects that precisely describe the encountered difficulty, aiding in troubleshooting and rectification.</p> </li> <li> <p>Validating user input: Meticulous input validation safeguards against invalid data being submitted to the contract, preventing unintended consequences and potential exploits.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#security-considerations","title":"Security Considerations","text":"<p>The contract prioritizes security, implementing robust mechanisms to protect NFT ownership and prevent malicious activity:</p> <ul> <li> <p>Access Controls: Granular access controls are enforced, meticulously restricting unauthorized access to critical functionalities like minting, burning, and transfers. Only authorized entities (e.g., contract owners or designated operators) can execute these actions.</p> </li> <li> <p>Validation of Operations: All operations undergo rigorous validation to ensure they adhere to pre-defined rules and restrictions, safeguarding against unauthorized actions or manipulation attempts.</p> </li> <li> <p>Arithmetic Safety: The contract employs safeguards to prevent overflow and underflow attacks during arithmetic operations, protecting against vulnerabilities that could manipulate NFT balances or lead to unexpected behavior.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-1155-Token-Contract/#conclusion","title":"Conclusion","text":"<p>This KRC1155 contract documentation provides a comprehensive overview for developers to interact with, including minting, burning, transferring, and managing tokens. Adherence to the KRC1155 standard enables efficient multi-token management within a single contract, supporting a wide range of use cases in digital assets.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/","title":"KRC 20 Token Contract","text":""},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#krc20-token-contract","title":"KRC20 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-20 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#overview","title":"Overview","text":"<p>This document outlines the technical details and functionalities of a KRC20 token contract implemented in Go. The contract leverages the Kalp SDK for operations within a blockchain network, providing a framework for issuing, transferring, and managing tokenized assets compliant with the KRC20 standard.</p> <p>Prerequisites</p> <ul> <li> <p>Familiarity with the Go programming language</p> </li> <li> <p>Basic understanding of blockchain concepts and KRC20 token standards</p> </li> <li> <p>Installation of the Kalp SDK</p> </li> <li> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#initialize-token-contract","title":"Initialize Token Contract","text":"<p>The <code>Initialize</code> function initializes a token contract with essential details, making it ready for subsequent interactions. This function must be called prior to any other contract functionalities to establish the token's name, symbol, and decimal places.</p> <p>Implementation (Go):</p> <pre><code>// Set information for a token and initialize contract.\nfunc (s *SmartContract) Initialize(sdk kalpsdk.TransactionContextInterface, name string, symbol string, decimals string) (bool, error) {\n    // Authorization and initialization checks omitted for brevity\n\n    err := sdk.PutStateWithoutKYC(nameKey, []byte(name))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token name: %v\", err)\n    }\n\n    // Symbol and decimals setting omitted for brevity\n\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>name (string): The human-readable name of the token (e.g., \"MyCoin\").</p> </li> <li> <p>symbol (string): The abbreviated symbol of the token (e.g., \"MYC\").</p> </li> <li> <p>decimals (string): The number of decimal places the token utilizes (e.g., \"18\" for 18 decimal places representing cents).</p> </li> </ul> <p>Function Breakdown:</p> <ul> <li> <p>Initialize (sdk kalpsdk.TransactionContextInterface, name string, symbol string, decimals string) (bool, error):</p> <ul> <li> <p>This function accepts four arguments:</p> <ul> <li> <p><code>sdk</code>: Reference to the Kalp SDK for blockchain interaction.</p> </li> <li> <p><code>name</code>: The token name.</p> </li> <li> <p><code>symbol</code>: The token symbol.</p> </li> <li> <p><code>decimals</code>: The number of decimal places for the token.</p> </li> </ul> </li> <li> <p>Return: It returns a boolean value indicating success (<code>true</code>) or failure (<code>false</code>) along with any potential errors.</p> </li> </ul> </li> </ul> <p>Authorization: Yes, only authorized clients (e.g., Deployer) can call the <code>Initialize</code> function. This ensures proper control over token creation and prevents unauthorized deployments.</p> <p>Note</p> <p>Authorization checks are crucial and intentionally omitted for brevity. Specific authorization mechanisms depend on the smart contract's design and deployment environment.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#token-operations","title":"Token Operations","text":""},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#mint-function","title":"Mint Function","text":"<p>The <code>Mint</code> function enables the creation of new tokens and subsequent additions to the minter's account balance. This operation also increases the total supply of the token in circulation.</p> <p>Implementation (Go):</p> <pre><code>// Mint creates new tokens and adds them to minter's account balance.\nfunc (s *SmartContract) Mint(sdk kalpsdk.TransactionContextInterface, amount int) error {\n    // Authorization checks omitted for brevity\n\n    if amount &lt;= 0 {\n        return fmt.Errorf(\"mint amount must be a positive integer\")\n    }\n\n    // Update balance and total supply logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li>amount (int): The positive integer value represents the number of tokens to be minted.</li> </ul> <p>Return Value:</p> <ul> <li>error: This function returns an error object if the minting operation fails. The error message provides details about the encountered issue.</li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#burn-function","title":"Burn Function","text":"<p>The <code>Burn</code> function permanently removes a specified number of tokens from the minter's account balance, effectively reducing the total supply of tokens in circulation.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Burn(sdk kalpsdk.TransactionContextInterface, amount int) error {\n    // Initialization and authorization checks omitted for brevity\n\n    if amount &lt;= 0 {\n        return errors.New(\"burn amount must be a positive integer\")\n    }\n\n    // Retrieve, update, and save the new balance and total supply logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li>amount (int): The positive integer value represents the number of tokens to be burned.</li> </ul> <p>Return Value:</p> <ul> <li>error: This function returns an error object if the burning operation fails. The error message provides details about the encountered issue.</li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#transfer-function","title":"Transfer Function","text":"<p>The <code>Transfer</code> function facilitates the movement of tokens between accounts within the Kalp ecosystem. It allows the caller (the account initiating the transaction) to send a specified number of tokens to a recipient account.</p> <p>Implementation (Go):</p> <pre><code>// Transfer transfers tokens from the client account to the recipient account.\nfunc (s *SmartContract) Transfer(sdk kalpsdk.TransactionContextInterface, recipient string, amount int) error {\n    // Initialization checks omitted for brevity\n\n    err := transferHelper(sdk, clientID, recipient, amount)\n    if err != nil {\n        return fmt.Errorf(\"failed to transfer: %v\", err)\n    }\n\n    // Emit Transfer event logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>recipient (string): The unique identifier of the recipient account that will receive the tokens.</p> </li> <li> <p>amount (int): The positive integer value representing the number of tokens to be transferred.</p> </li> </ul> <p>Return Value:</p> <ul> <li>error: This function returns an error object if the transfer operation fails. The error message provides details about the encountered issue, such as insufficient funds or an invalid recipient address.</li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#balanceof-function","title":"BalanceOf Function","text":"<p>The <code>BalanceOf</code> function serves as a key tool for retrieving the token balance associated with a specific account within the Kalp ecosystem. It provides a reliable and transparent way to query account holdings.</p> <p>Implementation (Go):</p> <pre><code>// BalanceOf returns the balance of the given account.\nfunc (s *SmartContract) BalanceOf(sdk kalpsdk.TransactionContextInterface, account string) (int, error) {\n    // Initialization checks omitted for brevity\n\n    balanceBytes, err := sdk.GetState(account)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to read from world state: %v\", err)\n    }\n\n    balance, _ := strconv.Atoi(string(balanceBytes))\n\n    return balance, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li>account (string): The unique identifier of the account whose balance is to be queried.</li> </ul> <p>Return Value:</p> <ul> <li> <p>int: The function returns an integer value representing the token balance of the specified account.</p> </li> <li> <p>error: If an error occurs during the balance retrieval process, the function returns an error object along with a descriptive error message.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#approval-function","title":"Approval Function","text":"<p>The <code>Approve</code> function empowers the caller (the account initiating the transaction) to grant spending authorization to another account, designated as the spender. This allows the spender to withdraw tokens from the caller's account multiple times up to a predefined maximum amount. This functionality underpins various use cases within decentralized applications (dApps) built on the Kalp blockchain.</p> <p>Implementation (Go):</p> <pre><code>// Approve allows the spender to withdraw from the calling client's token account.\nfunc (s *SmartContract) Approve(sdk kalpsdk.TransactionContextInterface, spender string, value int) error {\n    // Initialization checks omitted for brevity\n\n    // Create allowanceKey and update the state with the value\n    allowanceKey, _ := sdk.CreateCompositeKey(allowancePrefix, []string{owner, spender})\n    err := sdk.PutStateWithoutKYC(allowanceKey, []byte(strconv.Itoa(value)))\n    if err != nil {\n        return fmt.Errorf(\"failed to update state of smart contract for key %s: %v\", allowanceKey, err)\n    }\n\n    // Emit Approval event logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>spender (string): The unique identifier of the account authorized to withdraw tokens.</p> </li> <li> <p>value (int): The positive integer value representing the maximum allowable withdrawal amount.</p> </li> </ul> <p>Return Value:</p> <ul> <li>error: The function returns an error object if the approval process fails. The error message provides details about the encountered issue, such as invalid parameters, permission errors, or issues with underlying SDK functions.</li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#allowance-function","title":"Allowance Function","text":"<p>The <code>Allowance</code> function serves as a vital tool for retrieving the remaining allowance granted to a specific spender by the owner of a token account. This information is crucial for understanding the authorized spending capacity of the spender and ensuring proper control over token transfers within the Kalp ecosystem.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Allowance(sdk kalpsdk.TransactionContextInterface, owner string, spender string) (int, error) {\n    // Initialization checks omitted for brevity\n    allowanceKey, _ := sdk.CreateCompositeKey(allowancePrefix, []string{owner, spender})\n    allowanceBytes, err := sdk.GetState(allowanceKey)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to read allowance: %v\", err)\n    }\n    if allowanceBytes == nil {\n        return 0, nil // No allowance set\n    }\n    allowance, _ := strconv.Atoi(string(allowanceBytes))\n    return allowance, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>owner (string): The unique identifier of the account that owns the tokens.</p> </li> <li> <p>spender (string): The unique identifier of the account authorized to withdraw tokens.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p>int: The function returns an integer value representing the remaining number of tokens that the spender is authorized to withdraw from the owner's account.</p> </li> <li> <p>error: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message explaining the encountered issue.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#transferfrom-function","title":"TransferFrom Function","text":"<p>The <code>TransferFrom</code> function empowers a designated spender to initiate token transfers on behalf of the owner, enabling a flexible and controlled mechanism for token movement within the Kalp ecosystem. It's particularly useful in scenarios where third-party services or applications need to manage tokens for users.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) TransferFrom(sdk kalpsdk.TransactionContextInterface, from string, to string, value int) error {\n    // Initialization checks omitted for brevity\n\n    // Retrieve and check the allowance of the spender\n    // Decrease the allowance\n    // Perform the transfer using `transferHelper`\n    // Logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>from (string): The unique identifier of the account owning the tokens to be transferred.</p> </li> <li> <p>to (string): The unique identifier of the recipient account that will receive the tokens.</p> </li> <li> <p>value (int): The positive integer value representing the number of tokens to be transferred.</p> </li> </ul> <p>Return Value:</p> <ul> <li>error: The function returns an error object if the transfer process fails. The error message provides details about the encountered issue, such as insufficient allowance, invalid parameters, or other potential errors.</li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#token-information-function","title":"Token Information Function","text":"<p>The <code>Name</code> function serves as a fundamental tool for accessing the descriptive name associated with a token within the Kalp ecosystem. This information is crucial for identifying and understanding the token's purpose and characteristics within various applications and interactions.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Name(sdk kalpsdk.TransactionContextInterface) (string, error) {\n     // Initialization checks omitted for brevity\n    bytes, err := sdk.GetState(nameKey)\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to get token name: %v\", err)\n    }\n    return string(bytes), nil\n</code></pre> <p>Return Values:</p> <ul> <li> <p>string: The function returns a string value representing the token's name. This name typically aligns with the token's intended use cases and branding.</p> </li> <li> <p>error: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message explaining the issue, such as potential database errors or invalid access attempts.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#symbol-function","title":"Symbol Function","text":"<p>The <code>Symbol</code> function acts as a dedicated tool for retrieving the unique symbol associated with a token within the Kalp ecosystem. This symbol serves as a concise and recognizable identifier, enabling efficient communication and exchange across various applications and interfaces.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Symbol(sdk kalpsdk.TransactionContextInterface) (string, error) {\n     // Initialization checks omitted for brevity\n    bytes, err := sdk.GetState(symbolKey)\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to get Symbol: %v\", err)\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p>string: The function returns a string value representing the token's symbol. This symbol typically adheres to conventional shorthand conventions for clarity and consistency (e.g., \"MTK,\" \"KALP\").</p> </li> <li> <p>error: If an error occurs during retrieval, the function returns an error object along with a descriptive message detailing the issue, aiding in troubleshooting and issue resolution.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#totalsupply-function","title":"TotalSupply Function","text":"<p>The <code>TotalSupply</code> function serves as a vital tool for retrieving the total number of tokens that have been created and issued within the Kalp ecosystem. This information provides a crucial metric for understanding the overall token distribution and scarcity, which are fundamental aspects of token economics and market dynamics.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) TotalSupply(sdk kalpsdk.TransactionContextInterface) (int, error) {\n     // Initialization checks omitted for brevity\n    totalSupplyBytes, err := sdk.GetState(totalSupplyKey)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to retrieve total token supply: %v\", err)\n    }\n    if totalSupplyBytes == nil {\n        return 0, nil // No tokens minted yet\n    }\n    totalSupply, _ := strconv.Atoi(string(totalSupplyBytes))\n    return totalSupply, nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p>int: The function returns an integer value representing the total number of tokens currently in circulation within the Kalp ecosystem.</p> </li> <li> <p>error: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message detailing the encountered issue, such as potential storage errors or invalid access attempts.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#helper-functions","title":"Helper Functions","text":"<p>Included are several helper functions for internal logic, such as <code>transferHelper</code>, <code>add</code>, <code>sub</code>, and <code>checkInitialized</code>, which ensures the correct execution of token operations and state management.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#error-handling","title":"Error Handling","text":"<p>All operations include detailed error reporting to ensure developers can diagnose and resolve issues during integration and interaction with the contract.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#events","title":"Events","text":"<p>The contract emits events for significant actions such as transfers and approvals, facilitating off-chain applications and services to react to contract state changes.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#security-considerations","title":"Security Considerations","text":"<ul> <li> <p>Ensure proper access control is enforced, particularly for sensitive operations like <code>Mint</code> and <code>Burn</code>.</p> </li> <li> <p>Validate input parameters to mitigate risks such as reentrancy attacks and overflow/underflow vulnerabilities.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-20-Token-Contract/#conclusion","title":"Conclusion","text":"<p>This KRC20 token contract implemented in Go, utilizing the KalpSDK, provides a comprehensive suite of functionalities for managing digital assets on a blockchain network. The documentation outlined above offers a detailed guide for developers to integrate and leverage these capabilities within their applications.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/","title":"KRC 721 Token Contract","text":""},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#krc721-token-contract","title":"KRC721 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-721 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#overview","title":"Overview","text":"<p>This document provides technical details and guidelines for interacting with an KRC721 token contract implemented in Go. This contract utilizes the Kalp SDK to facilitate operations within a blockchain network, enabling the creation, management, and transfer of non-fungible tokens (NFTs).</p> <p>Prerequisites</p> <ul> <li> <p>Understanding of Go programming language</p> </li> <li> <p>Basic knowledge of blockchain and NFT concepts</p> </li> <li> <p>Installed KalpSDK environment</p> </li> </ul> <p>Note</p> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#initialize-token-contract","title":"Initialize Token Contract","text":"<p>The <code>Initialize</code> method serves as a crucial first step in configuring a Kalp-based ERC721 token contract. It establishes the name and symbol that will be indelibly associated with the token collection, ensuring clarity and consistency throughout its lifecycle.</p> <p>Implementation (Go):</p> <pre><code>func (c *TokenERC721Contract) Initialize(ctx kalpsdk.TransactionContextInterface, name string, symbol string) (bool, error) {\n    // Authorization check omitted for brevity\n    err := ctx.PutStateWithoutKYC(nameKey, []byte(name))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token name: %v\", err)\n    }\n    err = ctx.PutStateWithoutKYC(symbolKey, []byte(symbol))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token symbol: %v\", err)\n    }\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>name (string): The human-readable name that designates the token collection, often aligning with its intended use cases or branding.</p> </li> <li> <p>symbol (string): A concise and recognizable symbol that serves as a shorthand identifier for the token collection, typically following conventional naming conventions (e.g., \"MTK\" or \"KALP\").</p> </li> </ul> <p>Return Values:(bool, error): The method returns a boolean value indicating success or failure, accompanied by an error object if any issues arise during initialization.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#mintwithtokenuri-function","title":"MintWithTokenURI Function","text":"<p>The <code>MintWithTokenURI</code> method holds the power to create brand-new NFTs (Non-Fungible Tokens) within the Kalp ecosystem, cementing their unique existence and linking them with rich metadata. It serves as a cornerstone for establishing ownership and unlocking the diverse possibilities that NFTs offer.</p> <pre><code>func (c *TokenERC721Contract) MintWithTokenURI(ctx kalpsdk.TransactionContextInterface, tokenId string, tokenURI string) (*Nft, error) {\n    // Initialization and authorization checks omitted for brevity\n    nft := &amp;Nft{TokenId: tokenId, Owner: /* Owner's identity */, TokenURI: tokenURI}\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Balance and Transfer event logic omitted for brevity\n    return nft, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>tokenId (string): An unequivocally unique identifier assigned to the NFT, ensuring its individuality and preventing any chance of duplication.</p> </li> <li> <p>tokenURI (string): A Universal Resource Identifier (URI), acting as a digital address that points to a JSON file containing comprehensive metadata about the NFT's attributes, details, and potential functionalities.</p> </li> </ul> <p>Return Values: (*Nft, error) : Upon successful minting, the method returns a pointer to the newly created <code>Nft</code> object, containing its essential information. It also includes an error object if any issues arise during the process.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#burn-function","title":"Burn Function","text":"<p>The <code>Burn</code> method wields the definitive power to permanently remove NFTs (Non-Fungible Tokens) from the Kalp ecosystem, executing an irreversible act of destruction that revokes their presence and ownership. It serves as a mechanism for managing token supply, addressing specific use cases, or even symbolizing artistic expression.</p> <pre><code>func (c *TokenERC721Contract) Burn(ctx kalpsdk.TransactionContextInterface, tokenId string) (bool, error) {\n    // Ownership and initialization checks omitted for brevity\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    ctx.DelStateWithoutKYC(nftKey)\n    // Remove from balance and emit Transfer event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li>tokenId (string): The unique identifier that pinpoints the specific NFT destined for elimination.</li> </ul> <p>Return Values:(bool, error): The method indicates its success or failure by returning a boolean value, accompanied by an error object if any issues arise during the burning process.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#_1","title":"KRC 721 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> method sits at the heart of NFT (Non-Fungible Token) movement within the Kalp ecosystem, meticulously orchestrating the transfer of ownership from one entity to another. It stands as the cornerstone for enabling seamless transactions, trading, and sharing of NFTs.</p> <pre><code>func (c *TokenERC721Contract) TransferFrom(ctx kalpsdk.TransactionContextInterface, from string, to string, tokenId string) (bool, error) {\n    // Initialization, ownership, and approval checks omitted for brevity\n    nft, _ := _readNFT(ctx, tokenId)\n    nft.Owner = to\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Update balance keys and emit Transfer event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>from (string): The current owner of the NFT, relinquishing their control.</p> </li> <li> <p>to (string): The designated recipient who will assume ownership of the NFT.</p> </li> <li> <p>tokenId (string): The unique identifier that unequivocally designates the specific NFT being transferred.</p> </li> </ul> <p>Return Values:(bool, error): The method signals its success or failure through a boolean value, also returning an error object if any issues arise during the transfer process.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#approve-function","title":"Approve Function","text":"<p>The <code>Approve</code> method empowers NFT (Non-Fungible Token) owners within the Kalp ecosystem to selectively bestow transfer authority upon designated accounts, granting them the ability to move specific NFTs on behalf of the owner. This flexibility facilitates a range of collaborative and trust-based interactions.</p> <pre><code>func (c *TokenERC721Contract) Approve(ctx kalpsdk.TransactionContextInterface, operator string, tokenId string) (bool, error) {\n    // Initialization and ownership checks omitted for brevity\n    nft, _ := _readNFT(ctx, tokenId)\n    nft.Approved = operator\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Omitted logic for emitting Approval event\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>operator (string): The account designated to receive transfer approval for the specified NFT.</p> </li> <li> <p>tokenId (string): The unique identifier that pinpoints the NFT for which authorization is being granted.</p> </li> </ul> <p>Return Values:(bool, error): The method indicates success or failure through a boolean value, accompanied by an error object if any issues arise during the approval process.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#setapprovalforall-function","title":"SetApprovalForAll Function","text":"<p>The <code>SetApprovalForAll</code> method within the Kalp ecosystem empowers NFT (Non-Fungible Token) owners to confer blanket approval to designated accounts (operators). This grants the operator the ability to transfer all of the owner's NFTs, acting as a powerful tool for managing large collections or streamlining specific use cases.</p> <pre><code>func (c *TokenERC721Contract) SetApprovalForAll(ctx kalpsdk.TransactionContextInterface, operator string, approved bool) (bool, error) {\n    // Initialization checks omitted for brevity\n    sender := /* Fetch sender's identity */\n    approvalKey, _ := ctx.CreateCompositeKey(approvalPrefix, []string{sender, operator})\n    approval := Approval{Owner: sender, Operator: operator, Approved: approved}\n    approvalBytes, _ := json.Marshal(approval)\n    ctx.PutStateWithoutKYC(approvalKey, approvalBytes)\n    // Emit ApprovalForAll event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>operator (string): The account designated to receive approval for managing all the caller's NFTs.</p> </li> <li> <p>approved (bool): A flag indicating whether to grant (<code>true</code>) or revoke (<code>false</code>) approval for the operator.</p> </li> </ul> <p>Return Values:(bool, error): The method signals success or failure through a boolean value, along with an error object if any issues arise during the approval process.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#balanceof-function","title":"BalanceOf Function","text":"<p>The <code>BalanceOf</code> method acts as a digital accountant within the Kalp ecosystem, meticulously cataloging NFT (Non-Fungible Token) collections. It enables you to precisely determine the number of NFTs held by a specific account, serving as a crucial tool for understanding ownership patterns, token scarcity, and personal collections.</p> <pre><code>func (c *TokenERC721Contract) BalanceOf(ctx kalpsdk.TransactionContextInterface, owner string) int {\n    // Initialization checks omitted for brevity\n    iterator, _ := ctx.GetStateByPartialCompositeKey(balancePrefix, []string{owner})\n    balance := 0\n    for iterator.HasNext() {\n        iterator.Next()\n        balance++\n    }\n    return balance\n}\n</code></pre> <p>Parameters:</p> <ul> <li>owner (string): The account whose NFT holdings you wish to inspect.</li> </ul> <p>Return Value:int: A concise integer representing the exact quantity of NFTs owned by the specified account.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#ownerof-function","title":"OwnerOf Function","text":"<p>Within the Kalp NFT landscape, the <code>OwnerOf</code> method serves as a steadfast guide, revealing the rightful owner of a specified NFT. It acts as a fundamental tool for establishing ownership, ensuring responsible transfer, and upholding accountability within this dynamic ecosystem.</p> <pre><code>func (c *TokenERC721Contract) OwnerOf(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.Owner, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li>tokenId (string): The unique identifier that singles out the NFT for which ownership information is sought.</li> </ul> <p>Return Values:</p> <ul> <li> <p>Owner Account: A string representing the account holding ownership of the inquired NFT.</p> </li> <li> <p>Error: In the event of unforeseen retrieval obstacles, an error object is returned, shedding light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#getapproved-function","title":"GetApproved Function","text":"<p>The <code>GetApproved</code> method acts as a trustworthy informant, revealing the account specifically authorized to transfer a designated NFT on behalf of its owner. It serves as a vital tool for understanding transfer permissions and managing collaborative ownership scenarios.</p> <pre><code>func (c *TokenERC721Contract) GetApproved(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.Approved, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li>tokenId (string): The unique identifier that pinpoints the NFT for which authorization information is sought.</li> </ul> <p>Return Values:</p> <ul> <li> <p>Approved Account: A string disclosing the account granted transfer authority for the queried NFT.</p> </li> <li> <p>Error: In the event of retrieval obstacles, an error object is returned, clarifying the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#isapprovedforall-function","title":"IsApprovedForAll Function","text":"<p>The <code>IsApprovedForAll</code> method assumes the role of a meticulous gatekeeper, determining whether a designated account (operator) holds sweeping authority to manage the entire collection of NFTs belonging to a specific owner. It acts as a cornerstone for managing extensive collections and facilitating collaborative ownership structures.</p> <pre><code>func (c *TokenERC721Contract) IsApprovedForAll(ctx kalpsdk.TransactionContextInterface, owner string, operator string) (bool, error) {\n    approvalKey, _ := ctx.CreateCompositeKey(approvalPrefix, []string{owner, operator})\n    approvalBytes, err := ctx.GetState(approvalKey)\n    if len(approvalBytes) &lt; 1 {\n        return false, nil\n    }\n    approval := new(Approval)\n    _ = json.Unmarshal(approvalBytes, approval)\n    return approval.Approved, err\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p>owner (string): The account whose NFTs are potentially subject to management by an operator.</p> </li> <li> <p>operator (string): The account seeking verification of their blanket approval status.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p>bool: A boolean value unequivocally indicating whether the operator holds comprehensive approval to manage the owner's entire NFT collection.</p> </li> <li> <p>error: In the unlikely event of unforeseen challenges, an error object emerges, revealing the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#name-function","title":"Name Function","text":"<p>the <code>Name</code> method fulfills the role of a skillful archivist, divulging the distinct title bestowed upon a token collection. It serves as a fundamental means of identifying and referencing collections, fostering clarity and discoverability.</p> <pre><code>func (c *TokenERC721Contract) Name(ctx kalpsdk.TransactionContextInterface) (string, error) {\n    bytes, err := ctx.GetState(nameKey)\n    if err != nil {\n        return \"\", err\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p>string: The collection's carefully chosen name, representing its unique identity.</p> </li> <li> <p>error: In the unlikely event of retrieval obstacles, an error object surfaces to illuminate the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#symbol-function","title":"Symbol Function","text":"<p>The <code>Symbol</code> method acts as a herald, disclosing the succinct and potent symbol that serves as a collection's emblematic signature. It empowers concise identification and efficient referencing, akin to a heraldic crest in the digital realm.</p> <pre><code>func (c *TokenERC721Contract) Symbol(ctx kalpsdk.TransactionContextInterface) (string, error) {\n    bytes, err := ctx.GetState(symbolKey)\n    if err != nil {\n        return \"\", err\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p>string: The collection's meticulously chosen symbol, acting as its concise identifier and resonant emblem.</p> </li> <li> <p>error: Should retrieval obstacles arise, an error object emerges to shed light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#tokenuri-function","title":"TokenURI Function","text":"<p>Returns the metadata URI of an NFT.</p> <p>Parameters:</p> <ul> <li><code>tokenId</code> (string): Unique identifier for the NFT.</li> </ul> <p>Function: TokenURI</p> <pre><code>func (c *TokenERC721Contract) TokenURI(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.TokenURI, nil\n}\n</code></pre> <p>Returns: (string, error) - Metadata URI and error if any.</p>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#totalsupply-function","title":"TotalSupply Function","text":"<p>the <code>TokenURI</code> method plays the role of a trusty navigator, leading explorers to a digital harbor brimming with an NFT's rich metadata. It serves as a fundamental gateway to an NFT's unique traits, captivating imagery, and captivating stories.</p> <pre><code>func (c *TokenERC721Contract) TotalSupply(ctx kalpsdk.TransactionContextInterface) int {\n    iterator, _ := ctx.GetStateByPartialCompositeKey(nftPrefix, []string{})\n    totalSupply := 0\n    for iterator.HasNext() {\n        iterator.Next()\n        totalSupply++\n    }\n    return totalSupply\n}\n</code></pre> <p>Parameters:</p> <ul> <li>tokenId (string): The distinct identifier that pinpoints the specific NFT whose secrets await revelation.</li> </ul> <p>Return Values:</p> <ul> <li> <p>string: The metadata URI, a web address leading to a wellspring of descriptive details, vibrant visuals, and captivating stories.</p> </li> <li> <p>error: In the unlikely event of retrieval obstacles, an error object emerges, casting light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#helper-methods","title":"Helper Methods","text":""},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#checkinitialized-function","title":"checkInitialized Function","text":"<p>the <code>checkInitialized</code> method serves as a vigilant sentinel, safeguarding system integrity and ensuring the contract is in a fit state for operation. It acts as a crucial checkpoint, guaranteeing all essential setup procedures have been meticulously completed before transactions and interactions can commence.</p> <p>Returns:</p> <ul> <li> <p>bool: A boolean value indicating the initialization status of the contract:</p> <ul> <li> <p>true: The contract has been successfully initialized and is ready for use.</p> </li> <li> <p>false: The contract has not yet undergone initialization and remains inoperable.</p> </li> </ul> </li> <li> <p>error: If unforeseen challenges arise during the check, an error object surfaces, providing valuable insights into the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#error-handling","title":"Error Handling","text":"<p>The Kalp NFT contract prioritizes exceptional user experience by meticulously incorporating error-handling mechanisms. This ensures:</p> <ul> <li> <p>Clear and actionable feedback: When operations encounter roadblocks or invalid inputs are provided, informative error messages are conveyed, empowering users to rectify mistakes and navigate the system effectively.</p> </li> <li> <p>Reduced risk: By pinpointing the source of errors, developers and system operators can swiftly identify and address potential issues, mitigating operational risks and safeguarding the system's integrity.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#events","title":"Events","text":"<p>The contract leverages events as potent messengers, broadcasting crucial information about significant actions to external applications and services. This fosters:</p> <ul> <li> <p>Real-time monitoring: Off-chain applications can remain keenly aware of contract state changes, such as NFT transfers or approvals, enabling them to react dynamically and provide users with up-to-date information.</p> </li> <li> <p>Enhanced user experience: By staying abreast of contract events, external applications can trigger relevant functionalities, such as updating user interfaces or executing automated tasks, enriching the overall user experience.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#security-considerations","title":"Security Considerations","text":"<p>Security remains paramount within the Kalp NFT ecosystem. To safeguard the contract and its users, the following measures are implemented:</p> <ul> <li> <p>Granular access control: Sensitive operations, such as minting NFTs with custom URIs or burning existing ones, are subject to rigorous access control mechanisms. This ensures that only authorized individuals or processes can execute these actions, safeguarding against unauthorized modifications and potential misuse.</p> </li> <li> <p>Input validation: To thwart common vulnerabilities, the contract meticulously validates all user-provided input parameters. This involves verifying data formats and ensuring adherence to predefined constraints, effectively preventing malicious actors from exploiting unintended loopholes within the system.</p> </li> </ul>"},{"location":"Dev-documentation/KRC-Token-Standard/KRC-721-Token-Contract/#conclusion","title":"Conclusion","text":"<p>This KRC721 token contract provides a comprehensive set of functionalities for managing NFTs, including the creation, transfer, and querying of ownership and metadata. The above documentation offers a detailed guide for developers to effectively interact with and integrate these capabilities within their applications or platforms.</p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Deploy-the-smart-contract/","title":"Deploy the smart contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Deploy-the-smart-contract/#deploy-the-smart-contract","title":"Deploy the Smart Contract","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Tired of complex coding and deployment hassles? Building a Smart Contract shouldn't feel like climbing Mount Everest. This guide is here to empower you with a clear and smooth path to creating your Smart Contract. We'll break down the process into easy-to-follow steps, ensuring you have the confidence and knowledge to bring your ideas to life on the blockchain.</p> <p>Smart contracts are digital agreements coded on a blockchain that automatically execute or enforce the terms of a contract when predefined conditions are met. They enable secure, transparent, and decentralized transactions without the need for intermediaries.</p> <p>So, let\u2019s begin with the Smart Contract creation on Kalp Studio.</p> <p>Note</p> <p>To deploy a Smart Contract, a project is needed. Let's understand how a project is created first.</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Deploy-the-smart-contract/#smart-contract-creation","title":"Smart Contract Creation","text":"<p>Step 1: Initiating Smart Contract Creation: For first-time users, the screen with no Smart Contract list will be displayed.</p> <p></p> <p>To create a Smart Contract you have to agree to Kalp Studio's Terms and Conditions.</p> <p></p> <p>After you agree to the terms and conditions, you can start creating the Smart Contract. Click on Create Smart Contract.</p> <p></p> <p>Access the \"Smart Contract\" section via the left panel bar on Kalp Studio.</p> <p></p> <p>Select the \"Create Smart Contract\" button. Alternatively, this can also be achieved through the \"Create Smart Contract\" option on the Dashboard.</p> <p>Step 2: Detailing the Smart Contract:</p> <p></p> <ul> <li> <p>Name: Assign a distinctive name to the Smart Contract.</p> </li> <li> <p>Project: Identify the overarching project or system the Smart Contract integrates with.</p> </li> <li> <p>Description: Offer a concise description outlining the contract's functionality.</p> </li> </ul> <p>Step 3: Environment Selection:</p> <p></p> <p>Opt for the appropriate environment for deployment: \"Development\", \"Staging\", or \"Production\".</p> <p>Step 4: Network Selection:</p> <p></p> <p>Determine the deployment network - \"TestNet\".</p> <p>Step 5: Template Utilization and Submission:</p> <p></p> <p>Kalp Studio provides ERC token templates. Select the relevant template for your needs.</p> <p></p> <p>Download, complete, and upload the filled template to Kalp Studio for review and subsequent actions.</p> <p>Step 6: Final Review and Publication:</p> <p></p> <p>Save Draft</p> <p>If you want to pause the Smart Contract creation and would like to visit it later then Save Draft is a great option!</p> <p>In this option, all fields are editable and can be modified at a later point.</p> <p>Save &amp; Publish</p> <p>After you Save &amp; Publish the Smart Contract gets deployed on the Kalp blockchain. You can still edit the Smart Contract Name and Description. All other fields are non-editable.</p> <p>The published Smart Contract gets added to the list of Smart Contracts. If the user wants to make some changes in Smart Contract, Save Draft option can be used. The saved draft can be edited anytime by the user.</p> <p>List of Smart Contracts</p> <p>Adhering to these steps will ensure the professional and efficient creation of a Smart Contract on Kalp Studio, streamlining your project's development process. You can view the list of newly created Smart Contract after Save and Publish.</p> <p></p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Interacting-with-smart-contract/","title":"Interacting with smart contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Interacting-with-smart-contract/#interacting-with-smart-contract","title":"Interacting with smart contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Interacting-with-smart-contract/#interacting-with-your-smart-contract","title":"Interacting with Your Smart Contract","text":"<p>1 .  Establish a connection to the relevant blockchain network, enabling your application to interact with the deployed smart contracts.</p> <p>2 .  Kalp Studio automatically generates API endpoints that directly map to the functionalities of your smart contracts. These endpoints simplify integration by providing a well-defined interface for your front-end application to interact with the underlying smart contract logic.</p> <p></p> <p>Steps to Deploy and test the smart contract API endpoints:</p> <ul> <li>Deployment of Smart Contract through Kalp Studio:  Utilize the  generated API endpoints  directly within your front-end application (e.g., React.js, Next.js). This approach seamlessly integrates smart contract functionalities into your user interface, enabling dynamic interactions and data retrieval.</li> </ul> <p>Check out the Freshdesk Article: How to deploy a Smart Contract? or How Can I Perform Transactions using API Endpoints?</p> <ul> <li>Checking and Testing API Endpoints:  Employ  Postman, a popular API testing tool, to send requests to the generated API endpoints. This method facilitates individual function testing, allowing you to verify their behavior and outputs in a controlled environment before integrating them into your front-end application.</li> </ul>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Interacting-with-smart-contract/#postman-testing-for-kalp-smart-contract-api-endpoints","title":"Postman Testing for Kalp Smart Contract API Endpoints","text":"<p>Following successful smart contract deployment and API endpoint generation within Kalp Studio, delve into the essential steps for testing these endpoints using Postman:</p> <p>1 .  Reading from the Smart Contract</p> <p>Kalp Studio enables efficient data retrieval from deployed smart contracts using  read-only methods. These methods allow your application to query the blockchain ledger without modifying its state.</p> <p>Example:  To retrieve a user's account balance, you would invoke the  <code>ClientAccountBalance</code>  function through the generated API endpoint. This function would fetch the relevant data from the ledger and return it to your application.</p> <p>By leveraging read-only methods, you can access crucial information from the blockchain without altering its state, ensuring data integrity and facilitating various application functionalities.</p> <p></p> <p>2 .  Writing to the Smart Contract</p> <p>Kalp Studio empowers developers to perform  write operations, which involve modifying the state of the blockchain ledger through smart contract interactions. These operations typically involve sending transactions to specific contract functions provided by the Kalp SDK.</p> <p>Example:  To transfer tokens, you would utilize the appropriate function (e.g.,  <code>Transfer</code>) through the generated API endpoint. This function would initiate a transaction on the blockchain, deducting tokens from the sender's account and crediting them to the recipient's account.</p> <p></p> <p>3 .  Transaction Management:  With the Kalp SDK, developers can efficiently manage transactions on the blockchain network. It provides functions for submitting transactions, querying transaction information, and retrieving transaction history. This simplifies the process of interacting with the blockchain and ensures the integrity of transactional operations.</p> <p>Example:  All the Functions provided as:  <code>PutStateWithKYC, DelStateWithoutKYC, DelStateWithKYC, GetState, GetTxID, GetChannelD, SetEvent, GetUserID.</code></p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Interacting-with-smart-contract/#conclusion","title":"Conclusion","text":"<p>You're now ready to begin your journey as a Kalp blockchain developer. Experiment with different types of smart contracts, explore the functionalities offered by the Kalp SDK, and start building innovative DApps on the Kalp blockchain.</p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Test-the-smart-contract/","title":"Test the smart contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Test-the-smart-contract/#test-the-smart-contract","title":"Test the Smart Contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Test-the-smart-contract/#smart-contract-verification-and-testing","title":"Smart Contract Verification and Testing","text":"<p>Step 1: Verify your smart contract's syntax and functionality by compiling it using the following command:</p> <pre><code>$ go build .\n</code></pre> <p>Step 2: A successful compilation signifies that your code adheres to Go language syntax rules and is free of errors.</p> <p>Step 3: Proceed to test your smart contract to ensure its behavior aligns with your expectations. Utilize appropriate testing frameworks or unit tests to simulate interactions with your smart contract and verify its outputs. This step is crucial for identifying and rectifying any potential issues before deployment.</p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/","title":"Write the smart contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#write-the-smart-contract","title":"Write the Smart Contract","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#overview","title":"Overview","text":"<p>We require Kalp SDK to a comprehensive Golang package that simplifies the development of smart contracts on the Kalp blockchain network. It is specifically designed to enable developers to write and create Aa Kalp-blockchain-compliant smart contracts with a set of powerful functionalities.</p>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Golang installation and setup</p> <p>A recent version of Go is recommended preferably 1.19 or earlier 1.20. Compatibility with newer versions might not be guaranteed for all Kalp functionalities.</p> </li> <li> <p>Kalp Software Development Kit (SDK) Installation:</p> <ul> <li> <p>Installation: Install the Kalp SDK by following the official installation instructions provided by the Kalp team. These instructions may involve downloading a pre-built binary or building the SDK from the source code.</p> </li> <li> <p>Documentation: Familiarize yourself with the Kalp SDK documentation, which outlines available functionalities, usage examples, and best practices for interacting with the Kalp platform through your Go applications.</p> </li> </ul> </li> <li> <p>Basic Understanding of Blockchain Fundamentals:</p> <p>Possess a basic understanding of blockchain networks, including concepts like distributed ledgers, consensus mechanisms, and smart contracts.</p> </li> <li> <p>Go Programming Proficiency:</p> <p>Prior experience and proficiency in the Go programming language are essential prerequisites for contributing to Kalp development. This includes understanding core Go syntax, data structures, control flow statements, and error-handling mechanisms.</p> </li> </ul>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#set-up-your-development-environment","title":"Set up your Development Environment","text":"<ul> <li> <p>Download and install the appropriate Golang binary for your operating system from the official Golang download page:  https://go.dev/doc/install. Follow the provided installation instructions to ensure proper integration with your system.</p> </li> <li> <p>Set up your Go workspace, with the following process:</p> <ul> <li> <p>GOPATH: Set the <code>GOPATH</code> environment variable to define your preferred location for storing Go source code, compiled packages, and downloaded dependencies. It's recommended to choose a dedicated directory outside your system directories (e.g., <code>/home/your_username/go</code>).</p> </li> <li> <p>PATH Update: Add the <code>$GOPATH/bin</code> directory to your system's <code>PATH</code> environment variable. This allows you to execute Go commands (like <code>go build</code>, <code>go run</code>) from any terminal location without specifying the full path.</p> </li> </ul> </li> </ul>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#creating-and-starting-chaincode","title":"Creating and Starting Chaincode","text":"<ol> <li> <p>Create a new directory for your project.</p> <ol> <li> <p>Execute the following command to create a new directory named <code>my-smart-contract</code></p> </li> <li> <p>Change the directory into the newly created project directory.</p> </li> </ol> </li> </ol> <pre><code>$ mkdir my-smart-contract\n$ cd my-smart-contract\n</code></pre> <ol> <li>Initialize a new Go module: Within the <code>my-smart-contract</code> directory, run the following command to initialize a new Go module named <code>my-smart-contract</code>:</li> </ol> <p><pre><code>$ go mod init my-smart-contract\n</code></pre> 1.  Getting Started with Kalp-SDK: Use the <code>go get</code> command to download and install the Kalp SDK library:</p> <pre><code>$ go get -u github.com/p2eengineering/kalp-sdk-public/kalp\n</code></pre> <p>Response:</p> <pre><code>go: downloading golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: downloading golang.org/x/sys v0.17.0\ngo: downloading google.golang.org/grpc v1.62.0\ngo: downloading golang.org/x/net v0.21.0\ngo: downloading google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading google.golang.org/genproto v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading github.com/go-openapi/spec v0.20.14\ngo: downloading github.com/go-openapi/swag v0.22.9\ngo: downloading google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: downloading golang.org/x/mod v0.15.0\ngo: added github.com/go-openapi/jsonpointer v0.20.2\ngo: added github.com/go-openapi/jsonreference v0.20.4\ngo: added github.com/go-openapi/spec v0.20.14\ngo: added github.com/go-openapi/swag v0.22.9\ngo: added github.com/gobuffalo/envy v1.10.2\ngo: added github.com/gobuffalo/packd v1.0.2\ngo: added github.com/gobuffalo/packr v1.30.1\ngo: added github.com/golang/protobuf v1.5.3\ngo: added github.com/hyperledger/fabric-chaincode-go v0.0.0-20240124143825-7dec3c7e7d45\ngo: added github.com/hyperledger/fabric-contract-api-go v1.2.2\ngo: added github.com/hyperledger/fabric-protos-go v0.3.3\ngo: added github.com/joho/godotenv v1.5.1\ngo: added github.com/josharian/intern v1.0.0\ngo: added github.com/konsorten/go-windows-terminal-sequences v1.0.3\ngo: added github.com/mailru/easyjson v0.7.7\ngo: added github.com/p2eengineering/kalp-sdk-public v0.0.0-20240118070807-283512298976\ngo: added github.com/rogpeppe/go-internal v1.12.0\ngo: added github.com/sirupsen/logrus v1.9.3\ngo: added github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb\ngo: added github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415\ngo: added github.com/xeipuuv/gojsonschema v1.2.0\ngo: added golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: added golang.org/x/mod v0.15.0\ngo: added golang.org/x/net v0.21.0\ngo: added golang.org/x/sys v0.17.0\ngo: added golang.org/x/text v0.14.0\ngo: added google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: added google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: added google.golang.org/grpc v1.62.0\ngo: added google.golang.org/protobuf v1.32.0\ngo: added gopkg.in/yaml.v2 v2.4.0\ngo: added gopkg.in/yaml.v3 v3.0.1\n</code></pre> <ol> <li>Create a new Go source file<code>.go</code> within your project directory. This file will house the core logic of your smart contract. Utilize your preferred text editor or IDE to create the file and ensure it's saved with the <code>.go</code> extension.</li> </ol> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/p2eengineering/kalp-sdk-public/kalpsdk\"\n)\n\ntype SmartContract struct {\n     kalpsdk.Contract\n}\n\nfunc (sc *SmartContract) ExecuteTransaction() {\n    // Implement the logic for executing transactions\n    fmt.Println(\"Executing transaction...\")\n}\n\nfunc (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\n</code></pre> <p>This newly created file will encompass the following core elements:</p> <ul> <li> <p>Package Declaration: <code>package main</code>: This line specifies that the code within this file belongs to the <code>main</code> package, which is the entry point for your smart contract application.</p> </li> <li> <p>Imports:</p> <ul> <li> <p><code>fmt</code>: This import statement allows you to utilize the <code>fmt</code> package, providing functionalities for formatted printing and input/output operations.</p> </li> <li> <p><code>github.com/p2eengineering/kalp-sdk-public/kalpsdk</code>: This import statement brings the Kalp SDK library into your project, granting access to the necessary functionalities for interacting with the Kalp blockchain ecosystem.</p> </li> </ul> </li> <li> <p>Smart Contract Definition: <code>type SmartContract struct { ... }</code>: This part defines a custom struct named <code>SmartContract</code> which serves as the blueprint for your smart contract. It embeds the <code>kalpsdk.Contract</code> type, inheriting functionalities offered by the Kalp SDK framework.</p> </li> <li> <p>Transaction Execution Function: <code>func (sc *SmartContract) ExecuteTransaction() { ... }</code>: This function, named <code>ExecuteTransaction</code>, represents the core logic that will be executed whenever a transaction interacts with your smart contract. Customize this function to encapsulate the specific business logic your smart contract is designed to handle.</p> </li> <li> <p>Initialization Function: <code>func (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error { ... }</code>: This function, named <code>Init</code>, serves as the initialization entry point for your smart contract. It typically defines any setup tasks or initialization logic required for your smart contract to function correctly. It takes a <code>kalpsdk.TransactionContextInterface</code> argument, providing access to contextual information about the ongoing transaction.</p> </li> <li> <p>Create <code>main.go</code> file in the following way.</p> </li> </ul> <pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/p2eengineering/kalp-sdk/kalpsdk\"\n)\n\nfunc main() {\n\n    contract := kalpsdk.Contract{IsPayableContract: true}\n\n    contract.Logger = kalpsdk.NewLogger()\n    chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})\n    contract.Logger.Info(\"My KAPL SDK sm4\")\n\n    // Create a new instance of your KalpContractChaincode with your smart contract\n    // chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{kalpsdk.Contract{IsPayableContract: true}})\n    // kalpsdk.NewLogger()\n    if err != nil {\n        log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n    }\n\n    // Start the chaincode\n    if err := chaincode.Start(); err != nil {\n        log.Panicf(\"Error starting chaincode: %v\", err)\n    }\n</code></pre> <p>The <code>main.go</code> file stands as the conductor that orchestrates the initialization and execution of your smart contract within the Kalp blockchain environment. It serves as the entry point for your application, bringing your carefully crafted smart contract logic to life. Here's a detailed explanation of its structure:</p> <ul> <li> <p>Necessary Imports:</p> <ul> <li> <p>log package: This package empowers you to issue logging messages, providing valuable insights into the execution flow and potential errors for debugging purposes.</p> </li> <li> <p>github.com/p2eengineering/kalp-sdk/kalpsdk package: This import statement grants access to the essential Kalp SDK functionalities for interacting with the blockchain network and managing your smart contract.</p> </li> </ul> </li> <li> <p>The main Function: This function serves as the starting point for your application when it's executed. It undertakes the following crucial tasks:</p> </li> <li> <p>Contract Configuration:</p> <ul> <li> <p>contract := kalpsdk.Contract{IsPayableContract: true} : This line initializes a new <code>Contract</code> object, defining key properties of your smart contract. The <code>IsPayableContract: true</code> setting designates that your contract will be capable of receiving payments from users.</p> </li> <li> <p>contract.Logger = kalpsdk.NewLogger() : This statement creates a new logger instance and assigns it to the contract, enabling you to generate logging messages for tracking events and debugging.</p> </li> </ul> </li> <li> <p>Chaincode Instantiation:</p> <ul> <li> <p>chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract}) : This line constructs a new instance of the <code>KalpContractChaincode</code> type. It integrates your custom <code>SmartContract</code> implementation, effectively bridging your contract logic with the Kalp SDK framework.</p> </li> <li> <p>contract.Logger.Info(\"My KAPL SDK sm4\") : This statement logs an informative message using the logger, indicating that the chaincode is initialized and ready to commence operations.</p> </li> </ul> </li> <li> <p>Crucial Error Handling:if err != nil { ... } blocks: These conditional blocks diligently check for potential errors during chaincode creation and startup. If errors occur, the <code>panicf</code> the function is invoked, terminating execution with an informative error message. This assertive error handling safeguards the integrity of your application and facilitates debugging efforts.</p> </li> <li> <p>Chaincode Activation: if err := chaincode.Start(); err != nil { ... } : This block calls the <code>Start()</code> function on the instantiated chaincode, triggering the execution of your smart contract within the Kalp blockchain environment. Once again, error handling is incorporated to gracefully address any issues that might impede chaincode startup.</p> </li> </ul> <p>Payment Tracking for Payable Contracts</p> <p>Pass your contract struct as an argument to the NewChaincode _function and specify whether the contract is payable or not.  This places the external dependencies for your smart contract into a local <code>vendor</code> directory.</p> <pre><code>$ go mod vendor\n</code></pre> <ol> <li>Folder Structure: After Executing the above command the folder Structure shows up as below:</li> </ol> <pre><code>Folder name\n\u251c\u2500\u2500vendor\n\u251c\u2500\u2500go.mod\n\u251c\u2500\u2500go.sum\n\u251c\u2500\u2500main.go\n\u2514\u2500\u2500 contract\n    \u2514\u2500\u2500 contract.go\n</code></pre> <ol> <li>Save your changes.</li> </ol>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#implementation-steps-with-kalp-sdk","title":"Implementation Steps with Kalp SDK","text":"<ol> <li>Define a New Go Struct: Represent your contract with a new Go struct and embed the <code>kalpsdk.Contract</code> struct to inherit base contract functionalities.</li> </ol> <pre><code>type MyContract struct {\nkalpsdk.Contract\n}\n</code></pre> <ol> <li>Implement the Contract Interface: Define the <code>Init</code> and <code>Invoke</code> methods for initialization logic and invocation handling.</li> </ol> <pre><code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n// Invoke logic return nil\n}\n</code></pre>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#blockchain-data-management","title":"Blockchain Data Management","text":"<p>This section details the core functionalities available for managing data on the blockchain:</p> <p>Writing to the Blockchain:</p> <ul> <li> <p>PutStateWithKyc : This function facilitates writing data onto the blockchain ledger. Crucially, it enforces mandatory KYC (Know Your Customer) verification as part of the write operation, ensuring compliance with regulatory requirements or specific platform policies.</p> </li> <li> <p>PutStateWithoutKyc : This function enables writing data to the blockchain ledger. Unlike its counterpart, it bypasses the KYC verification step, potentially catering to situations where regulatory constraints are not applicable or KYC checks have already been performed at an earlier stage.</p> </li> </ul> <p>Reading from the Blockchain:</p> <ul> <li>GetState : This function retrieves the data from the blockchain ledger. It allows querying the current state of the ledger to obtain information relevant to your application's needs.</li> </ul> <p>Deleting from the Blockchain:</p> <ul> <li> <p>DelStateWithKyc : This function enables deleting data from the blockchain ledger. Similar to <code>PutStateWithKyc</code>, it enforces mandatory KYC verification before proceeding with the deletion operation.</p> </li> <li> <p>DelStateWithoutKyc : This function allows the deleting data from the blockchain ledger. Just as with <code>PutStateWithoutKyc</code>, it bypasses the KYC verification step, potentially catering to specific scenarios where deletion is permitted without additional verification.</p> </li> </ul>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#sample-code-examples","title":"Sample Code Examples","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#writing-to-the-blockchain","title":"Writing to the Blockchain","text":""},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#putstatewithkyc","title":"PutStateWithKyc","text":"<pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\")) \nif err != nil {\n  // Handle error \n } else {\n  // Data successfully written to the blockchain with KYC verification\n }\n</code></pre>"},{"location":"Dev-documentation/Smart-Contract-Write-Test-Deploy-Interact/Write-the-smart-contract/#putstatewithoutkyc","title":"PutStateWithoutKyc","text":"<pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/","title":"Kalp Golang SDK","text":""},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#kalp-golang-sdk","title":"Kalp Golang SDK","text":"<p>This documentation provides an in-depth guide to the Kalp Software Development Kit (SDK), tailored for developers aiming to interact with the Kalp blockchain network.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#overview","title":"Overview","text":"<p>The Kalp SDK is engineered to streamline the development process for Kalp blockchain applications. It offers a suite of tools and functionalities that enable developers to efficiently read and write data, manage transactions, perform KYC checks, track payments for payable contracts, and enhance debugging through logger functionality.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#key-features","title":"Key Features","text":"<p>The Kalp SDK empowers developers with a robust suite of functionalities designed to simplify and enhance smart contract interaction:</p> <ul> <li> <p>Data Management:: Key-Value Storage: Efficiently store and retrieve data on the blockchain using a key-value pair structure. This functionality allows persistent data management within your smart contracts.</p> </li> <li> <p>Transaction Handling:: Comprehensive Transaction Management: Seamlessly submit, query, and retrieve the history of transactions associated with your smart contracts. This comprehensive suite of tools streamlines transaction management workflows.</p> </li> <li> <p>KYC Integration:: Integrated KYC Checks: Enforce compliance with regulatory requirements or implement access control mechanisms by integrating KYC verification processes directly within your smart contracts.</p> </li> <li> <p>Payment Tracking:: Streamlined Payment Monitoring: Effortlessly track payments initiated through your smart contracts, particularly within the context of payable contracts. This functionality facilitates accurate record-keeping and financial reconciliation.</p> </li> <li> <p>Debugging Support:: Enhanced Logging: Gain valuable insights into the behavior and execution of your smart contracts through comprehensive logging capabilities. This functionality aids in debugging and troubleshooting potential issues.</p> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <p>Go Programming Language: Kalp blockchain contracts are written in Go. Make sure you have Go installed on your system. Download Go.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#kalp-sdk-installation","title":"Kalp SDK Installation","text":"<p>Integrating the Kalp SDK into your project is a breeze. To install the Kalp-SDK, use the following Go command:</p> <pre><code>go get -u github.com/p2eengineering/kalp-sdk-public/kalpsdk\n</code></pre> <p>This command utilizes the <code>go get</code> package management tool within Go to download and install the Kalp SDK from the specified GitHub repository. The <code>-u</code> flag ensures you receive the latest available version.</p> <p>Done! The Kalp SDK is ready to be imported and utilized within your Go project, empowering you to interact with Kalp smart contracts and leverage the platform's functionalities.</p> <p>Note</p> <p>The SDK is compatible with_ Go version 1.19__. For newer versions of Go, update your <code>_go.mod_</code> file to specify version 1.19.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#examples","title":"Examples","text":""},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#creating-a-contract","title":"Creating a Contract","text":"<p>Define a Go struct to represent your contract and embed <code>kalpsdk.Contract</code> for base functionalities.</p> <pre><code>type MyContract struct {\n    kalpsdk.Contract\n}\n</code></pre> <p>Struct Creation: Begin by defining a Go struct to represent your smart contract. This <code>struct</code>will serve as the foundation for encapsulating your contract's state variables, functions, and other relevant attributes.</p> <p>Embedding <code>**kalpsdk.Contract**</code>: To leverage the core functionalities provided by the Kalp SDK, embed the <code>kalpsdk.Contract</code> type within your custom contract <code>struct</code>. This grants your contract access to essential features like transaction management, key-value storage, and more.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#implementing-the-contract-interface","title":"Implementing the Contract Interface","text":"<p>Implement <code>Init</code> and <code>Invoke</code> methods for contract initialization and invocation.</p> <pre><code> func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n    // Initialization logic\n    return nil\n}\n\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n    // Invocation logic\n    return nil\n</code></pre> <p>To breathe functionality into your smart contract, implement the following crucial methods:</p> <ul> <li> <p>Init Method:</p> <ul> <li> <p>Purpose: Responsible for initializing your contract's state variables and performing any actions required upon first deployment to the blockchain.</p> </li> <li> <p>Signature: <code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error</code></p> </li> </ul> </li> <li> <p>Invoke Method:</p> <ul> <li> <p>Purpose: Handles calls made to your contract's functions after deployment. This method orchestrates the execution of the requested actions and interactions with the blockchain.</p> </li> <li> <p>Signature: <code>func (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error</code></p> </li> </ul> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#creating-and-starting-chaincode","title":"Creating and Starting Chaincode","text":"<p>Instantiate your contract and start the chaincode.</p> <pre><code>// Sample payable contract object\ncontract := kalpsdk.Contract{IsPayableContract: true}\n\n// KalpSDK Logger object for enhanced operation visibility\ncontract.Logger = kalpsdk.NewLogger()\n\n// New instance of KalpContractChaincode with your contract\nchaincode, err := kalpsdk.NewChaincode(&amp;MyContract{contract})\nif err != nil {\n    log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n}\n\n// Start the chaincode\nif err := chaincode.Start(); err != nil {\n    panic(fmt.Sprintf(\"Error starting chaincode: %v\", err))\n}\n</code></pre> <p>Once your smart contract is defined and implemented, proceed with these steps to instantiate it and launch the chaincode:</p> <ul> <li> <p>Contract Configuration:</p> <ul> <li> <p>Payable Contract: If your contract involves receiving payments, set the <code>IsPayableContract</code> field of the <code>kalpsdk.Contract</code> struct to <code>true</code>. This enables your contract to handle incoming payments.</p> </li> <li> <p>Logger Integration: (Optional) For enhanced visibility into chaincode execution and potential debugging assistance, consider assigning an instance of <code>kalpsdk.NewLogger()</code> to the <code>Logger</code> field of the <code>kalpsdk.Contract</code> struct.</p> </li> </ul> </li> <li> <p>Chaincode Creation: Create a new instance of <code>kalpsdk.Chaincode</code> by passing your custom contract struct (<code>MyContract</code>) wrapped within an instance of <code>MyContract</code>. This establishes the connection between your contract logic and the chaincode runtime environment.</p> </li> <li> <p>Error Handling: Employ proper error-handling mechanisms using <code>if</code> statements and appropriate logging or panic functions (e.g., <code>log.Panicf</code>) to catch potential errors during chaincode creation and gracefully handle any issues that might arise.</p> </li> <li> <p>Chaincode Startup: Once the chaincode object is created, initiate its execution by calling the <code>Start()</code> method. This method triggers the chaincode's lifecycle and activates your smart contract, making it ready to receive transactions and interact with the blockchain.</p> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#start-the-chaincode","title":"Start the Chaincode","text":"<p>Call the <code>Start</code> function on the chaincode instance to start your chaincode.</p> <pre><code>if err := chaincode.Start(); err != nil {\n  panic(fmt.Sprintf(\"Error starting chaincode: %v\", err))\n}\n</code></pre> <p>Call the <code>Start()</code> method on the chaincode object to initiate its execution and activate your smart contract.</p> <p>Usage:</p> <ul> <li> <p>Function Call: <code>chaincode.Start()</code>: It directly calls the <code>Start()</code> function on the chaincode instance, signaling its readiness to commence operations.</p> </li> <li> <p>Error Handling:</p> <ul> <li> <p><code>if err := chaincode.Start(); err != nil</code>: This conditional statement meticulously checks for errors that may arise during the chaincode's startup process.</p> </li> <li> <p>If an error occurs (<code>err != nil</code>), the code gracefully handles it using a panic statement, logging a descriptive message to facilitate debugging.</p> </li> </ul> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#blockchain-data-management","title":"Blockchain Data Management","text":"<p>This section details the core functionalities available for managing data on the blockchain.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#writing-to-the-kalp-blockchain","title":"Writing to the Kalp Blockchain","text":"<p>This section delves into the process of writing data onto the Kalp blockchain, enabling persistent storage and facilitating diverse applications.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#putstatewithkyc","title":"PutStateWithKyc","text":"<p>This function allows writing data to the ledger with KYC verification, ensuring only KYC-verified users can make ledger modifications.</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain with KYC verification\n}\n</code></pre> <p>It writes a key-value pair to the Kalp blockchain ledger, ensuring only users who have passed KYC verification can write data.</p> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing information about the current transaction and blockchain environment.</p> </li> <li> <p><code>myKey</code>: A unique string key for the data being stored.</p> </li> <li> <p><code>[]byte(\"myValue\")</code>: The actual data to be written, represented as a byte array.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data writing.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is written successfully without encountering errors.</p> </li> </ul> <p>By leveraging <code>PutStateWithKyc</code>, you can ensure secure and compliant data storage on the Kalp blockchain, fostering trust and reliability within your applications. Remember to tailor the error handling and success logic within your code to suit your specific use case and application requirements.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#putstatewithoutkyc","title":"PutStateWithoutKyc","text":"<p>The <code>PutStateWithoutKyc</code> function within the Kalp SDK offers an alternative approach for writing data onto the blockchain ledger. Unlike its counterpart, this function bypasses the KYC verification step, enabling broader access to data modification capabilities:</p> <p>Functionality:</p> <ul> <li> <p>Data Writing: Similar to <code>PutStateWithKyc</code>, this function facilitates writing a key-value pair to the blockchain ledger.</p> </li> <li> <p>No KYC Enforcement: It does not require mandatory KYC verification before proceeding with the data storage operation. This approach can be suitable for scenarios where:</p> <ul> <li> <p>KYC verification is not applicable or has already been performed at an earlier stage.</p> </li> <li> <p>The data being written has minimal privacy or security concerns.</p> </li> </ul> </li> </ul> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre> <p>The usage pattern for <code>PutStateWithoutKyc</code> mirrors that of <code>PutStateWithKyc</code>:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context.</p> </li> <li> <p><code>key</code>: Specifies the unique key for the data.</p> </li> <li> <p><code>value</code>: Represents the actual data to be written.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data writing, similar to <code>PutStateWithKyc</code>.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is written successfully without encountering errors.</p> </li> </ul> <p>By understanding the distinct functionalities of <code>PutStateWithKyc</code> and <code>PutStateWithoutKyc</code>, you can make informed decisions about data storage on the Kalp blockchain, balancing security, compliance, and accessibility according to your application's needs.</p>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#reading-from-the-kalp-blockchain","title":"Reading from the Kalp Blockchain","text":""},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#getstate","title":"GetState","text":"<p>The <code>GetState</code> function within the Kalp SDK empowers you to retrieve data stored on the blockchain ledger. This function acts as a key-value store lookup mechanism, allowing you to access previously written data based on its unique identifier.</p> <p>Functionality:</p> <ul> <li> <p>Data Retrieval: This function retrieves the value associated with a specific key from the ledger.</p> </li> <li> <p>Key-Value Lookup: It operates like a traditional key-value store, where each key maps to a corresponding value.</p> </li> </ul> <pre><code>value, err := ctx.GetState(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Process the retrieved value\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"myKey\"</code>: This string argument specifies the unique key of the data you intend to retrieve.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors that might arise during the data retrieval process. These errors could indicate issues like:</p> <ul> <li> <p>Invalid key (key not found in the ledger)</p> </li> <li> <p>Network connectivity problems</p> </li> <li> <p>Permission issues (user not authorized to access the data)</p> </li> </ul> </li> <li> <p>Success Scenario:</p> </li> <li> <p>The <code>else</code> block executes if the data retrieval is successful and no errors occur.</p> </li> <li> <p>The <code>value</code> variable stores the retrieved data, which can be of various types depending on how it was originally stored using <code>PutState</code> functions.</p> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#deleting-from-the-kalp-blockchain","title":"Deleting from the Kalp Blockchain","text":""},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#delstatewithkyc","title":"DelStateWithKyc","text":"<p>The <code>DelStateWithKyc</code> function within the Kalp SDK grants authorized users the ability to remove data from the blockchain ledger, enforcing mandatory KYC verification before proceeding with the deletion process.</p> <p>This functionality safeguards the integrity of the ledger by ensuring only authorized and verified users can modify its state:</p> <p>Functionality:</p> <ul> <li> <p>Data Deletion: This function facilitates the removal of a key-value pair from the blockchain ledger.</p> </li> <li> <p>KYC Enforcement: It mandates successful KYC verification as a prerequisite for data deletion. This verification process ensures that the user attempting to delete data is authorized to do so, adhering to security best practices and potentially complying with regulatory requirements.</p> </li> </ul> <pre><code>err := ctx.DelStateWithKyc(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully deleted from the blockchain with KYC verification\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"myKey\"</code>: This string argument specifies the unique key of the data you intend to delete.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles any potential errors that might arise during the KYC verification process or data deletion operation. It's crucial to implement appropriate error-handling mechanisms to gracefully address any issues and prevent unexpected behavior.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the KYC verification is successful and the data is deleted from the ledger without errors. This block typically performs actions like logging success messages or updating internal state variables within your application.</p> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#delstatewithoutkyc","title":"DelStateWithoutKyc","text":"<p>The <code>DelStateWithoutKyc</code> function within the Kalp SDK offers a way to remove data from the blockchain ledger but bypasses mandatory KYC verification. While it simplifies deletion, it's crucial to approach this function with caution due to potential security concerns:</p> <p>Functionality:</p> <ul> <li> <p>Data Deletion: Similar to <code>DelStateWithKyc</code>, this function removes a key-value pair from the ledger.</p> </li> <li> <p>No KYC Enforcement: Unlike its counterpart, it does not require KYC verification before proceeding with deletion. This can be suitable for specific scenarios where:</p> <ul> <li> <p>KYC verification has already been performed at an earlier stage.</p> </li> <li> <p>The data being deleted is non-sensitive and deletion consequences are minimal.</p> </li> </ul> </li> </ul> <pre><code>err := ctx.DelStateWithoutKyc(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully deleted from the blockchain without KYC verification\n}\n</code></pre> <p>The usage pattern mirrors <code>DelStateWithKyc</code>:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context.</p> </li> <li> <p><code>\"myKey\"</code>: Specifies the unique key of the data to be deleted.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data deletion.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is deleted successfully. </p> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#getkyc","title":"GetKYC","text":"<p>The <code>GetKYC</code> function within the Kalp SDK empowers you to verify a user's KYC (Know Your Customer) status on the network. This functionality is essential for implementing access control mechanisms and ensuring that only verified users can perform specific actions or access sensitive data within your application.</p> <p>Functionality:</p> <p>KYC Verification Check: This function queries the network to determine if a particular user identified by their user ID (<code>userId</code>) has successfully completed the KYC verification process.</p> <pre><code>Kyced, err := ctx.GetKYC(\"userId\")\nif err != nil {\n    // Handle error\n} else if Kyced {\n    // User has completed KYC, proceed with the desired action\n} else {\n    // User has not completed KYC, handle accordingly\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"userId\"</code>: This string argument specifies the user ID for whom you want to check the KYC status.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors that might arise during the KYC verification check, such as network issues or invalid user IDs.</p> </li> <li> <p>KYC Verification Result: The <code>Kyced</code> boolean variable stores the result of the KYC check.</p> <ul> <li> <p><code>true</code>: Indicates the user has completed KYC verification.</p> </li> <li> <p><code>false</code>: Indicates the user has not completed KYC verification.</p> </li> <li> <p>Based on the <code>Kyced</code> value, you can implement conditional logic within your application:</p> <ul> <li> <p>If <code>Kyced</code> is <code>true</code>, proceed with actions that require KYC verification (e.g., allowing access to sensitive data or functionalities).</p> </li> <li> <p>If <code>Kyced</code> is <code>false</code>, handle scenarios where the user has not completed KYC verification (e.g., display an informative message, prompt the user to complete KYC, or restrict access to certain features).</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Dev-documentation/Use-the-kalp-sdk/Kalp-golang-sdk/#conclusion","title":"Conclusion","text":"<p>The Kalp-SDK offers a robust set of tools for developers building decentralized applications on the Kalp blockchain network. By leveraging the SDK's functionalities, developers can efficiently manage data, transactions, and compliance requirements, facilitating a streamlined development process.</p> <p>Happy coding with the Kalp-SDK on the Kalp blockchain network!</p>"},{"location":"Getting-started/API-Gateway/How-to-Navigate-to-the-List-of-Smart-Contract/","title":"How to navigate to the list of smart contract","text":""},{"location":"Getting-started/API-Gateway/How-to-Navigate-to-the-List-of-Smart-Contract/#how-to-navigate-to-the-list-of-smart-contract","title":"How to Navigate to the List of Smart Contract","text":"<p>Navigating the Kalp Studio platform to access the smart contract list is a straightforward process. Follow these steps to seamlessly move through the dashboard and find the information you need.</p>"},{"location":"Getting-started/API-Gateway/How-to-Navigate-to-the-List-of-Smart-Contract/#step-by-step-guide","title":"Step-by-Step Guide","text":"<p>Access the Dashboard:</p> <p>Upon logging into Kalp Studio, you will land on the Dashboard. The dashboard provides an overview of your activities and quick access to essential features.</p> <p></p> <p>Locate the Sidebar Menu: On the left-hand side, you will find a vertical sidebar menu. This menu contains various options including:</p> <ul> <li> <p>Dashboard</p> </li> <li> <p>Credits</p> </li> <li> <p>Docs</p> </li> <li> <p>Wallet</p> </li> <li> <p>Help and Support</p> </li> </ul> <p>Select the 'Smart Contract' Option:</p> <p>Click on the Smart Contract tab in the sidebar. This will redirect you to the section dedicated to managing and deploying smart contracts.</p> <p></p> <p>Navigate to API Gateway:</p> <p>Within the Smart Contract section, look for the API Gateway tab. Clicking on this will bring you to the page where you can manage API endpoints related to your smart contracts.</p> <p></p> <p>View Smart Contract List:</p> <p>The API Gateway page will display a list of smart contracts you have created. This list includes details such as:</p> <ul> <li> <p>ID</p> </li> <li> <p>Name</p> </li> <li> <p>Category</p> </li> <li> <p>Status</p> </li> <li> <p>Network</p> </li> <li> <p>Blockchain</p> </li> <li> <p>Creation Date</p> </li> <li> <p>Actions available (e.g., Generate Endpoint, Re-Generate Endpoint)</p> </li> </ul>"},{"location":"Getting-started/API-Gateway/How-to-Navigate-to-the-List-of-Smart-Contract/#key-features-on-the-smart-contract-list-page","title":"Key Features on the Smart Contract List Page","text":"<ul> <li>Search and Filter:</li> </ul> <p>Use the search bar and filters to quickly find specific smart contracts.</p> <ul> <li>Actions:</li> </ul> <p>Perform actions such as generating or re-generating endpoints for your smart contracts.</p> <ul> <li>Status Monitoring:</li> </ul> <p>Easily monitor the status of your smart contracts to ensure they are active and functioning correctly.</p> <ul> <li>Pagination:</li> </ul> <p>If you have numerous smart contracts, use the pagination controls at the bottom to navigate through the pages.</p> <p>By following these steps, you can efficiently navigate to the smart contract list within Kalp Studio, manage your smart contracts, and utilize the platform's full potential.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/","title":"How to generate API endpoints","text":""},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#how-to-generate-api-endpoints","title":"How to generate API endpoints","text":"<p>API endpoints are essential for integrating and automating various processes in blockchain development. KALP Studio provides a robust platform that allows developers to efficiently create, manage, and generate API endpoints for their smart contracts.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#login-to-kalp-studio","title":"Login to Kalp Studio","text":"<p>Navigate to the Kalp Studio login page and enter your credentials to access your dashboard.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#access-the-api-gateway-section","title":"Access the API Gateway Section","text":"<p>On the left-hand menu, select \"API Gateway.\"</p> <p></p> <p>If you haven't subscribed to any API Gateway, you'll see a message prompting you to subscribe.</p> <p>Note</p> <p>To create and manage API endpoints, you need to subscribe to one of the plans  offered by Kalp Studio. Ensure you upgrade your plan if you're currently on the free tier to access more features and higher limits.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#create-or-select-a-smart-contract","title":"Create or Select a Smart Contract","text":"<p>Once subscribed, you can manage and generate API endpoints for your smart contracts. Select the desired smart contract from the list or create a new one.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#generate-endpoints","title":"Generate Endpoints","text":"<p>For the selected smart contract, click \"Generate Endpoints.\" This action will create the necessary API endpoints.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#endpoint-generated","title":"Endpoint Generated","text":"<p>Once you select generate endpoint, a pop-up will appear, notifying that the endpoint has been generated.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#view-and-manage-endpoints","title":"View and Manage Endpoints","text":"<p>After generating the endpoints, you can view and manage them. The status of each endpoint (success or failure) will be displayed, along with details like the network and blockchain used.</p>"},{"location":"Getting-started/API-Gateway/How-to-generate-API-endpoints/#check-and-use-api-parameters","title":"Check and Use API Parameters","text":"<p>Click on \"Check Params\" to view the details and parameters for each API endpoint. This will help you understand how to integrate and use these endpoints in your applications.</p> <p>By following these steps, you can efficiently generate and manage API endpoints for your smart contracts on Kalp Studio, enhancing your blockchain development process.</p>"},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/","title":"How to generate API Key","text":""},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/#how-to-generate-api-key","title":"How to generate API Key","text":"<p>Generating an API key is a crucial step for integrating and utilizing the features provided by Kalp Studio. API keys are used to authenticate requests associated with your project, ensuring secure and streamlined access to various services.</p>"},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/#access-the-api-gateway","title":"Access the API Gateway","text":"<p>1 .  Log in to your Kalp Studio account.</p> <p>2 .  Navigate to the API Gateway:</p> <ul> <li> <p>On the left sidebar, you will see a menu with several options such as Dashboard, Smart Contract, API Gateway, Transaction Monitoring, Subscription, API Key Generation, and Settings.</p> </li> <li> <p>Click on API Gateway to access the API management section.</p> </li> </ul> <p></p>"},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/#create-a-new-api-key","title":"Create a New API Key","text":"<p>1 .  Click on the \"Create API Auth Key\" button:</p> <ul> <li> <p>If you have not created any API keys yet, the screen will be blank.</p> </li> <li> <p>Click on the black button that says + Create API Auth Key.</p> </li> </ul> <p></p>"},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/#fill-in-the-api-key-details","title":"Fill in the API Key Details","text":"<ol> <li> <p>Enter the Key Name and Description:</p> </li> <li> <p>A pop-up window will appear, prompting you to enter details for the new API key.</p> </li> <li> <p>Provide a Key Name for easy identification. For example, you can name it \"Swaggy M.\"</p> </li> <li> <p>Optionally, you can add a Key Description to describe the purpose or scope of the key.</p> </li> </ol> <p></p> <p>Create the API Key:</p> <p></p> <p>After filling in the details, click on the Create Now button to generate the key.</p>"},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/#manage-your-api-keys","title":"Manage Your API Keys","text":"<ul> <li> <p>Once created, your API keys will be listed in the API Key Generation section.</p> </li> <li> <p>Here, you can see details such as the Key Name, Last Used date, API Auth Key, Date Created, and Status.</p> </li> <li> <p>You can activate or deactivate keys using the toggle switch under the Status column.</p> </li> </ul>"},{"location":"Getting-started/API-Key-Generation/How-to-generate-API-Key/#conclusion","title":"Conclusion","text":"<p>Generating an API key in Kalp Studio enhances your ability to integrate and utilize various services securely. By following the steps outlined in this guide, you can easily create and manage your API keys, ensuring that your project runs smoothly with authenticated access to the necessary APIs.</p>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/","title":"How does Billing work on the Kalp Studio Platform","text":""},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#how-does-billing-work-on-the-kalp-studio-platform","title":"How does Billing work on the Kalp Studio Platform","text":""},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#introduction","title":"Introduction","text":"<p>Kalp Studio offers a flexible and transparent billing system designed to cater to a wide range of user needs. The platform employs a pay-as-you-go pricing model, ensuring that users only pay for the services they consume without the burden of long-term contracts or complex licensing agreements. This article will delve into the specifics of how billing works on Kalp Studio, highlighting key aspects such as service selection, subscription plans, and the pay-as-you-go model.</p>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#how-kalp-studio-pricing-works","title":"How Kalp Studio Pricing Works","text":""},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#pay-as-you-go-model","title":"Pay-as-You-Go Model","text":"<p>Kalp Studio\u2019s billing system revolves around a pay-as-you-go model, which is highly beneficial for users with varying and dynamic needs. This model allows users to:</p> <ul> <li> <p>Pay Only for What They Use: Users are billed only for the specific services they utilize, eliminating unnecessary costs.</p> </li> <li> <p>No Additional Costs for Termination: There are no hidden fees or additional costs once the user stops using the services.</p> </li> </ul>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#key-components-of-the-billing-system","title":"Key Components of the Billing System","text":"<p>The billing system on Kalp Studio can be broken down into three main components:</p> <ol> <li> <p>Choose Your Service</p> <ul> <li> <p>Users can explore a wide array of products and services available on Kalp Studio.</p> </li> <li> <p>The platform provides tools to search and add services that are tailored to the user\u2019s specific requirements.</p> </li> </ul> </li> <li> <p>Subscribe to a Plan</p> <ul> <li> <p>Users have the option to subscribe to a plan that aligns with their usage patterns and budget.</p> </li> <li> <p>Kalp Studio offers various plans to provide flexibility and value, accommodating both small-scale and large-scale needs.</p> </li> </ul> </li> <li> <p>Pay-as-You-Go</p> <ul> <li> <p>This feature enables users to adapt effortlessly to changing business needs without the risk of overcommitting their budget.</p> </li> <li> <p>It provides the flexibility to scale services up or down based on current demands, ensuring cost-efficiency.</p> </li> </ul> </li> </ol>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#detailed-breakdown-of-the-billing-process","title":"Detailed Breakdown of the Billing Process","text":""},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#service-selection","title":"Service Selection","text":"<p>Users begin by selecting the services they need from the Kalp Studio Console. The platform's intuitive interface allows for easy navigation through a comprehensive list of available services. Users can search for specific services and add them to their portfolio based on their unique requirements.</p>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#plan-subscription","title":"Plan Subscription","text":"<p>Once the services are selected, users can choose a subscription plan that best fits their needs. Kalp Studio offers a range of plans, each designed to offer maximum value and flexibility. These plans are structured to cater to different usage levels, from individual developers to large enterprises.</p>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#pay-as-you-go-flexibility","title":"Pay-as-You-Go Flexibility","text":"<p>The pay-as-you-go model is the cornerstone of Kalp Studio's billing system. This model ensures that users are only charged for what they use, with no additional costs for stopping services. This flexibility is particularly advantageous for businesses with fluctuating needs, allowing them to manage their expenses efficiently.</p>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#transparent-billing","title":"Transparent Billing","text":"<p>Kalp Studio ensures complete transparency in its billing process. Users can view detailed billing statements that outline their usage and charges. This transparency helps users understand their spending patterns and manage their budgets effectively.</p>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#benefits-of-kalp-studios-billing-system","title":"Benefits of Kalp Studio's Billing System","text":"<ul> <li> <p>Cost Efficiency: By only paying for what they use, users can optimize their spending and avoid unnecessary costs.</p> </li> <li> <p>Flexibility: The ability to scale services up or down based on current needs allows users to adapt quickly to changing business environments.</p> </li> <li> <p>Transparency: Detailed billing statements provide users with clear insights into their usage and expenses, promoting better financial management.</p> </li> </ul>"},{"location":"Getting-started/Billing/How-does-Billing-work-on-the-Kalp-Studio-Platform/#conclusion","title":"Conclusion","text":"<p>Kalp Studio\u2019s billing system is designed to offer maximum flexibility, transparency, and cost efficiency. Whether you are a small developer or a large enterprise, the pay-as-you-go model ensures that you only pay for the services you need and use. By providing a wide range of service options and flexible subscription plans, Kalp Studio empowers users to manage their expenses effectively and adapt to changing business needs seamlessly.</p> <p>With Kalp Studio, you can focus on leveraging the platform\u2019s robust services to drive your business forward, confident in the knowledge that your billing is both fair and transparent.</p>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/","title":"How does a new user access billing","text":""},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#how-does-a-new-user-access-billing","title":"How does a new user access billing","text":"<p>When a new user logs into the Kalp Studio platform, they are greeted with a user-friendly billing screen designed to provide clarity and ease of use. Below is a detailed description of how this screen appears and functions for a new user:</p>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#layout-and-navigation","title":"Layout and Navigation","text":"<p>Upon accessing the billing screen, users will see a clean, well-organized interface. The screen is divided into several sections, each serving a specific purpose. The main sections include:</p> <ol> <li> <p>Sidebar Navigation:</p> </li> <li> <p>Dashboard: Provides an overview of the user's account.</p> </li> <li> <p>Billing: The current section, focusing on pricing and subscription details.</p> </li> <li> <p>Credits: Information about available credits.</p> </li> <li> <p>Docs: Access to documentation for various services.</p> </li> <li> <p>Wallet: Manage wallet and payment methods.</p> </li> <li> <p>Help and Support: Assistance for any queries or issues.</p> </li> <li> <p>Main Content Area:</p> </li> <li> <p>Header: Includes the user profile icon, notifications, help, and wallet connection options.</p> </li> <li> <p>Billing Information: An explanation of how the Kalp Studio pricing model works.</p> </li> </ol>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#pricing-model-overview","title":"Pricing Model Overview","text":"<p>Kalp Studio employs a pay-as-you-go pricing model, making it convenient for users to pay only for the services they use. This approach eliminates the need for long-term contracts or complex licensing agreements. The main highlights are:</p> <ul> <li> <p>Choose Your Service: Users can explore a wide range of products and services. They can search for and add the specific services they need.</p> </li> <li> <p>Subscribe to a Plan: Users can choose a subscription plan that suits their usage and budget. The platform offers various plans to provide flexibility and value.</p> </li> <li> <p>Pay-as-you-go: This model allows users to adapt effortlessly to changing business needs without overcommitting their budget.</p> </li> </ul>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#product-listings","title":"Product Listings","text":"<p>The billing screen features a product section where users can browse and subscribe to different services. Each product listing includes:</p> <ul> <li> <p>Product Name: Clearly displayed with an icon for quick identification.</p> </li> <li> <p>Description: A brief summary of what the product offers.</p> </li> <li> <p>Free Trial: Some products may offer a free trial period.</p> </li> <li> <p>Subscription Button: Users can subscribe to the service directly from this screen.</p> </li> <li> <p>Starting Plan Cost: The initial cost in credits for subscribing to the product.</p> </li> </ul>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#sorting-and-searching","title":"Sorting and Searching","text":"<p>Users can search for specific products using the search bar and sort the product listings based on various criteria such as newly added products.</p>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#subscription-plans-for-new-users","title":"Subscription Plans for New Users","text":"<ol> <li> <p>Developer Plan - $0.00/Monthly</p> </li> <li> <p>Smart Contract: 100</p> </li> <li>Blockchain: KALP DLT &amp; EVM Chain</li> <li> <p>Networks: Testnet &amp; Mainnet</p> </li> <li> <p>Business Plan - $ 19.00/ Monthly</p> <ul> <li>Smart Contract: 5000</li> <li>Blockchain: KALP DLT &amp; EVM Chain</li> <li>Networks: Testnet &amp; Mainnet</li> </ul> </li> <li> <p>Enterprise Plan - $49.00/Monthly</p> <ul> <li>Smart Contract: Unlimited</li> <li>Blockchain: KALP DLT &amp; EVM Chain</li> <li>Networks: Testnet &amp; Mainnet</li> </ul> </li> </ol> <p>The user can upgrade from the current plan (Debeloper) to either the Business or Enterprise plan.</p> <p>Each plan offers a different number of API requests per month, with higher-priced plans offering more requests. The user can upgrade from the current plan (Starter) to either the Developer or Enterprise plan.</p>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#upgrading-plans","title":"Upgrading Plans","text":"<p>Users can upgrade their plans directly from the billing screen. The process is straightforward and involves selecting the desired plan and following the prompts to complete the upgrade. This flexibility ensures that users can scale their services as their requirements grow.</p>"},{"location":"Getting-started/Billing/How-does-a-new-user-access-billing/#conclusion","title":"Conclusion","text":"<p>The billing screen in Kalp Studio is designed with user convenience in mind, offering a clear and efficient way to manage subscriptions and services. New users will find it easy to navigate, understand the pricing model, and make informed decisions about their service needs.</p>"},{"location":"Getting-started/Billing/How-does-a-subscribed-user-access-billing/","title":"How does a subscribed user access billing","text":""},{"location":"Getting-started/Billing/How-does-a-subscribed-user-access-billing/#how-does-a-subscribed-user-access-billing","title":"How does a subscribed user access billing?","text":"<p>Kalp Studio offers a comprehensive billing screen that provides subscribed users with a clear and detailed overview of their financial commitments and subscription details. This guide will walk you through the features and layout of the billing screen for users with active subscriptions.</p>"},{"location":"Getting-started/Billing/How-does-a-subscribed-user-access-billing/#layout-and-navigation","title":"Layout and Navigation","text":"<p>Upon accessing the billing screen, users are presented with a well-organized interface. The screen is divided into several sections for ease of navigation and use:</p> <ul> <li> <p>Sidebar Navigation:</p> </li> <li> <p>Dashboard: Overview of the user's account.</p> </li> <li> <p>Billing: Current section focused on billing details.</p> </li> <li> <p>Credits: Information about available credits.</p> </li> <li> <p>Docs: Access to documentation for various services.</p> </li> <li> <p>Wallet: Manage wallet and payment methods.</p> </li> <li> <p>Help and Support: Get assistance for any queries or issues.</p> </li> <li> <p>Header: Includes the user profile icon, notifications, help, and wallet connection options.</p> </li> </ul>"},{"location":"Getting-started/Billing/How-does-a-subscribed-user-access-billing/#your-subscription","title":"Your Subscription","text":"<p>Below the Billing Summary, the \"Your Subscription\" section provides detailed information about the user's current subscriptions:</p> <ul> <li>Service Name: The name of the subscribed service.</li> <li>Status: Indicates whether the service is active or inactive.</li> <li>Plan Details:</li> </ul> <p>\u2192 Developer Plan</p> <p>\u2192 Business Plan</p> <p>\u2192 Enterprise Plan</p> <ul> <li>Actions:</li> </ul> <p>\u2192 Upgrade: Allows users to upgrade their plan.</p> <p>\u2192 Renew: Option to renew the subscription.</p>"},{"location":"Getting-started/Billing/How-does-a-subscribed-user-access-billing/#product-listings","title":"Product Listings","text":"<p>The billing screen also features a product section where users can browse and subscribe to additional services. Each product listing includes:</p> <ul> <li> <p>Product Name: Displayed with an icon for quick identification.</p> </li> <li> <p>Description: A summary of the product.</p> </li> <li> <p>Free Trial: Availability of a free trial period.</p> </li> <li> <p>Subscription Button: Option to subscribe to the service.</p> </li> <li> <p>Starting Plan Cost: Initial cost in credits for subscribing to the product.</p> </li> </ul> <p>User needs to renew the product and plan to have an uninterrupted blockchain experience on Kalp Studio.</p>"},{"location":"Getting-started/Billing/How-does-a-subscribed-user-access-billing/#conclusion","title":"Conclusion","text":"<p>The billing screen in Kalp Studio is designed to provide subscribed users with a clear, detailed view of their subscriptions and billing status. It offers a comprehensive summary of billing details, easy access to subscription management, and options for upgrading plans. This user-centric design ensures that managing subscriptions and billing is efficient, allowing users to focus on leveraging the platform's services for their needs.</p>"},{"location":"Getting-started/Credits/How-to-Add-Credit/","title":"How to Add Credit","text":""},{"location":"Getting-started/Credits/How-to-Add-Credit/#how-to-add-credit","title":"How to Add Credit","text":"<p>Kalp Studio provides a seamless platform for managing your credits and transactions efficiently. Adding credits to your Kalp Studio wallet is crucial for accessing various services and features offered by the platform.</p> <p>As a new user, you will receive a complimentary $50 onboarding credit. This credit allows you to explore and utilize the full capabilities of the platform right from the start.</p> <p></p>"},{"location":"Getting-started/Credits/How-to-Add-Credit/#step-1-access-the-credits-section","title":"Step 1: Access the Credits Section","text":"<ol> <li> <p>Login to KALP Studio: Enter your credentials and log into your account.</p> </li> <li> <p>Navigate to the Credits Page: Click the \"Credits\" option on the left sidebar. This will take you to the Credits management section.</p> </li> </ol>"},{"location":"Getting-started/Credits/How-to-Add-Credit/#step-2-initiate-adding-credits","title":"Step 2: Initiate Adding Credits","text":"<ol> <li>Click on \"Add Credits\": On the Credits page, you will see a button labeled \"Add Credits\". Click on it to proceed.</li> </ol>"},{"location":"Getting-started/Credits/How-to-Add-Credit/#step-3-enter-credit-amount","title":"Step 3: Enter Credit Amount","text":"<ol> <li> <p>Enter the Desired Amount: A dialog box will appear asking you to enter the amount you wish to add to your wallet. Enter the amount in the specified field.</p> </li> <li> <p>Confirm the Amount: Double-check the amount to ensure it is correct.</p> </li> </ol>"},{"location":"Getting-started/Credits/How-to-Add-Credit/#step-4-confirm-the-transaction","title":"Step 4: Confirm the Transaction","text":"<ol> <li>Click on \"Add Credits\": After entering the amount, click the \"Add Credits\" button to proceed with the transaction.</li> </ol>"},{"location":"Getting-started/Credits/How-to-Add-Credit/#step-5-transaction-in-transit","title":"Step 5: Transaction In-Transit","text":"<p>A pop-up window will open where users can see their entered amount in USD converted to INR. Enter Phone Number and proceed.</p>"},{"location":"Getting-started/Credits/How-to-Add-Credit/#step-6-transaction-successful","title":"Step 6: Transaction Successful","text":"<ol> <li> <p>View Transaction Confirmation: Once the transaction is complete, you will see a confirmation message indicating that credits have been added successfully. This screen will display the transaction ID and the amount added.</p> </li> <li> <p>Check Updated Balance: Return to the Credits page to verify that your total credit balance has been updated with the newly added amount.</p> </li> </ol> <p>By following these steps, you can easily add credits to your KALP Studio wallet, enabling you to utilize various services and features on the platform.</p>"},{"location":"Getting-started/Credits/Navigate-to-the-Credit-Section/","title":"Navigate to the credit section","text":""},{"location":"Getting-started/Credits/Navigate-to-the-Credit-Section/#navigate-to-the-credit-section","title":"Navigate to the Credit Section","text":"<p>Kalp Studio provides a user-friendly interface for managing decentralized applications and blockchain-based projects. Among its many features, the \"Credits\" section is crucial for handling financial transactions within the platform.</p>"},{"location":"Getting-started/Credits/Navigate-to-the-Credit-Section/#navigating-to-the-credits-section","title":"Navigating to the Credits Section","text":"<ol> <li> <p>Login to Kalp Studio: Begin by logging into your Kalp Studio account.</p> </li> <li> <p>Access the Dashboard: Once logged in, you will be directed to the main dashboard. The dashboard provides an overview of various functionalities, including connecting a wallet and building smart contracts.</p> </li> </ol> <p></p> <ol> <li>Locate the Sidebar Menu: On the left side of the screen, you will find a sidebar menu. This menu contains several options: Dashboard, Credits, Docs, Wallet, and Help and Support.</li> </ol> <p></p> <ol> <li>Select \"Credits\": Click the \"Credits\" option in the sidebar. This action will redirect you to the Credits section, where you can manage your financial transactions and view your credit balance.</li> </ol>"},{"location":"Getting-started/Credits/Navigate-to-the-Credit-Section/#components-of-the-credit-screen","title":"Components of the Credit Screen","text":"<p>The credit screen is designed to provide a comprehensive view of your credits and transactions. Here are the main components:</p> <ol> <li>Total Credit Available: At the top of the screen, you will see the \"Total Credit Available\" section. This displays the total amount of credit you currently have in your account.</li> </ol> <p></p> <ol> <li>Add Credits: Below the total credit available, there is an \"Add Credits\" button. Clicking this button allows you to add more credits to your account, ensuring you have sufficient funds for your transactions.</li> </ol> <p></p> <ol> <li>Credit Transactions Summary:</li> </ol> <p>Credited: This shows the total amount credited to your account.  </p> <p>Debited: This section displays the total amount debited from your account. If no debits have occurred, it may show as N/A.</p> <p></p> <ol> <li> <p>All Transactions: The lower part of the credit screen lists all your transactions. Each transaction entry includes:</p> </li> <li> <p>Transaction ID: A unique identifier for each transaction.</p> </li> <li> <p>Description: A brief description of the transaction, such as \"Fund Added To Wallet.\"</p> </li> <li> <p>Date and Time: The exact date and time when the transaction occurred.</p> </li> <li> <p>Amount: The amount credited or debited.</p> </li> <li> <p>Status: The current status of the transaction, which can be \"Pending\" or \"Success.\"</p> </li> </ol> <p></p> <ol> <li> <p>Transaction Filters: You can filter your transactions based on type (e.g., all transactions, credited, debited) and date range. This helps in quickly locating specific transactions.</p> </li> <li> <p>Reset Button: The reset button allows you to clear any applied filters and view the complete list of transactions.</p> </li> <li> <p>Connect Wallet Button: At the top right corner, there is a \"+ Connect Wallet\" button. This feature enables you to link your wallet to Kalp Studio for seamless transactions.</p> </li> </ol>"},{"location":"Getting-started/Credits/Navigate-to-the-Credit-Section/#conclusion","title":"Conclusion","text":"<p>Navigating to the Credits section in Kalp Studio is straightforward, thanks to the intuitive design of the platform. Understanding the components of the credit screen is essential for effectively managing your financial transactions. By following the steps outlined above, you can easily access and utilize the Credits section, ensuring a smooth and efficient experience with Kalp Studio.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/","title":"How to Navigate Kalp Studio Dashboard as an Active User","text":""},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#how-to-navigate-kalp-studio-dashboard-as-an-active-user","title":"How to Navigate Kalp Studio Dashboard as an Active User","text":"<p>Kalp Studio is a versatile platform tailored for blockchain and decentralized application (DApp) development. As an active user, understanding how to efficiently navigate the platform is crucial to maximize productivity and leverage its full potential.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#dashboard-overview","title":"Dashboard Overview","text":"<p>Upon logging into Kalp Studio, you are presented with the Dashboard, which serves as your central hub. The key components of the Dashboard include:</p> <p></p> <ul> <li>Connect Wallet: This \"Connect now\" button on the dashboard to link or connect your Kalp wallet or other wallets mentioned above. This connection is crucial for accessing decentralized applications and handling transactions securely.</li> </ul> <p></p> <ul> <li>Build Smart Contracts: This feature enables you to start building smart contracts using Kalp\u2019s instant deployer. Clicking \u201cGet started\u201d will direct you to the subscription page.</li> </ul> <p></p> <ul> <li>Kalp Community: This section highlights the active Kalp community, showcasing the number of members. Engaging with this community can provide valuable insights and support.</li> </ul>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#navigation-menu","title":"Navigation Menu","text":"<p>On the left-hand side of the screen, you will find the primary navigation menu, which includes the following options:</p> <p>1 .  Dashboard: This option returns you to the main dashboard view.</p> <p>2 .  Billing: Manage your billing information and payment methods here.</p> <p>3 .  Credits: This section allows you to view and manage your credits within the Kalp ecosystem.</p> <p>4 .  Docs: Access comprehensive documentation and resources to assist you with development tasks.</p> <p>5 .  Wallet: Manage your connected wallets and view transaction histories. Your wallet balance and address are also displayed at the top-right corner of the screen for quick reference.</p> <p>6 .  Help and Support: Obtain assistance and support for any issues or queries you may encounter.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#our-products","title":"Our Products","text":"<p>The Dashboard also features a variety of products offered by Kalp Studio. For active users, these subscribed services are labeled as \u201cActive\u201d:</p> <ul> <li> <p>KYC as a Service: This service allows seamless integration of Know Your Customer (KYC) processes into your applications. The \"Explore\" button provides detailed information and access.</p> </li> <li> <p>Smart Contracts: This section offers tools and resources for building and deploying smart contracts. The \u201cExplore\u201d button leads you to more in-depth features and guides.</p> </li> <li> <p>Payment Engine: Solutions for handling payments within your DApps can be found here. Clicking \"Get started\" will guide you through the setup process.</p> </li> <li> <p>Compliance: This section provides tools to ensure your applications meet regulatory requirements.</p> </li> <li> <p>Communication: Features for enhancing communication within your applications are available here.</p> </li> <li> <p>Storage: Secure storage solutions for your blockchain data are offered in this section.</p> </li> </ul> <p>Each product section includes a brief description and a button to help you delve deeper into the respective features.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#accessing-kalp-apps","title":"Accessing Kalp Apps","text":"<p>In the upper-right corner, there is an \"Apps\" icon that, when clicked, displays a list of available Kalp apps.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#wallet-management","title":"Wallet Management","text":"<p>For an active user, managing your wallet is essential. Your connected wallet's address and balance are prominently displayed at the top-right corner of the Dashboard. Clicking on the wallet icon or navigating to the \"Wallet\" section allows you to manage your connected wallets, view transaction histories, and ensure the security of your funds.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#community-and-support","title":"Community and Support","text":"<p>Engage with the Kalp community through various social media platforms listed on the dashboard. For any assistance, the \"Help and Support\" section provides access to FAQs, support tickets, and other resources to resolve your queries efficiently.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Dashboard-as-an-Active-User/#conclusion","title":"Conclusion","text":"<p>Kalp Studio offers a user-friendly interface with powerful features for blockchain developers and enthusiasts. By familiarizing yourself with the Dashboard, navigation menu, and available products, you can leverage the platform to build and manage your decentralized applications effectively, ensuring a seamless and productive experience.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/","title":"How to Navigate Kalp Studio Platform as a New User","text":""},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#how-to-navigate-kalp-studio-platform-as-a-new-user","title":"How to Navigate Kalp Studio Platform as a New User","text":"<p>Kalp Studio is a comprehensive platform designed to facilitate blockchain and decentralized application (DApp) development. As a new user, this guide will help you navigate the platform efficiently.</p> <p>As the new user logs in to the dashboard, a total credit of $50 will be credited to the account.</p> <p></p> <p>Note</p> <p>Credits are one-time rewards. Users can use those credits to subscribe to the Kalp Studio services. Credits will be reflected in the profile segment. </p> <p></p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#dashboard-overview","title":"Dashboard Overview","text":"<p>Upon logging into Kalp Studio, you are greeted by the Dashboard, which serves as your control center. The key components of the Dashboard include:</p> <p></p> <ul> <li>Connect Wallet: A prominent call-to-action button on the dashboard encourages you to connect your wallet to access decentralized applications and services.</li> </ul> <p></p> <ul> <li>Build Smart Contracts: This feature allows you to get started with building smart contracts using Kalp\u2019s instant deployer.</li> </ul> <p></p> <ul> <li>Kalp Community: This section provides information about the vibrant Kalp community, showcasing the number of active members.</li> </ul>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#navigation-menu","title":"Navigation Menu","text":"<p>On the left side of the screen, you will find the primary navigation menu, which includes the following options:</p> <p></p> <p>1 .  Dashboard: This option returns you to the main dashboard view.</p> <p>2 .  Billing: Here you can manage your billing information and payment methods.</p> <p>3 .  Credits: This section allows you to view and manage your credits within the Kalp ecosystem.</p> <p>4 .  Docs: Access documentation and resources to assist you with development.</p> <p>5 .  Wallet: Manage your connected wallets and view transaction histories.</p> <p>6 .  Help and Support: Obtain assistance and support for any issues or queries.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#our-products","title":"Our Products","text":"<p>Note</p> <p>The Dashboard also highlights various products offered by Kalp Studio:</p> <ul> <li> <p>KYC as a Service: This service allows you to integrate Know Your Customer (KYC) processes into your applications seamlessly.</p> </li> <li> <p>Smart Contracts: This section provides tools and resources for building and deploying smart contracts.</p> </li> <li> <p>Payment Engine: Here you can find solutions for handling payments within your DApps.</p> </li> <li> <p>Compliance: Tools to ensure your applications meet regulatory requirements are available in this section.</p> </li> <li> <p>Communication: Features for enhancing communication within your applications are provided here.</p> </li> <li> <p>Storage: This section offers secure storage solutions for your blockchain data.</p> </li> </ul> <p>Each product section includes a brief description and either a \"Get started\" button for users who have not yet subscribed or an \"Explore\" button for users who have subscribed and wish to dive deeper into the features.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#accessing-kalp-apps","title":"Accessing Kalp Apps","text":"<p>In the upper-right corner, there is an \"Apps\" icon that, when clicked, displays a list of available Kalp apps.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#connecting-your-wallet","title":"Connecting Your Wallet","text":"<p>To fully utilize Kalp Studio\u2019s features, you need to connect your wallet. Click the \"Connect now\" button on the dashboard to link or connect your Kalp wallet or other wallets mentioned above. This connection is crucial for accessing decentralized applications and handling transactions securely.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#help-and-support","title":"Help and Support","text":"<p>Engage with the Kalp community through various social media platforms listed on the dashboard. For any assistance, the \"Help and Support\" section provides access to FAQs, support tickets, and other resources to resolve your queries.</p>"},{"location":"Getting-started/Dashboard/How-to-Navigate-Kalp-Studio-Platform-as-a-New-User/#conclusion","title":"Conclusion","text":"<p>Kalp Studio offers a user-friendly interface with robust features for blockchain developers and enthusiasts. By familiarizing yourself with the dashboard, navigation menu, and available products, you can leverage the platform to build and manage your decentralized applications effectively.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/","title":"How to Deploy a Smart Contract on Kalp Studio","text":""},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#how-to-deploy-a-smart-contract-on-kalp-studio","title":"How to Deploy a Smart Contract on Kalp Studio","text":"<p>Deploying a smart contract on KALP Studio is a streamlined process that involves a few simple steps. This guide will walk you through the entire procedure, using the screenshots provided as visual aids.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#step-1-access-the-kalp-studio","title":"Step 1: Access the Kalp Studio","text":"<p>Log in to the Kalp Studio Platform and access the Dashboard.</p> <p></p> <p>Click on Get Started and the Kalp Instant Deployer dashboard will appear.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#dashboard-overview","title":"Dashboard Overview","text":"<p>When you first log in to KALP Studio, you'll be greeted by the dashboard. Here, you can see various options like \"Dashboard,\" \"Smart Contract,\" \"API Gateway,\" \"Transaction Monitoring,\" and more on the left-hand side menu.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#subscribing-to-the-smart-contract-deployer","title":"Subscribing to the Smart Contract Deployer","text":"<p>To begin deploying a smart contract, click the \"Subscribe\" button under the \"Smart Contract Deployer\" section. This will allow you to access the smart contract deployment tools.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#step-2-creating-a-new-smart-contract","title":"Step 2: Creating a New Smart Contract","text":""},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#building-smart-contracts","title":"Building Smart Contracts","text":"<p>After subscribing, you'll see the main deployment screen. Click on the \"Create New\" button to start building a smart contract.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#entering-smart-contract-details","title":"Entering Smart Contract Details","text":"<p>In this step, you need to enter the details of your smart contract:</p> <ul> <li> <p>Name: Enter a name for your smart contract.</p> </li> <li> <p>Category: Choose a category for your smart contract (e.g., NFT, Token, DEX, DAO, etc.).</p> </li> <li> <p>Description: Optionally, you can add a description for your smart contract.</p> </li> </ul>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#step-3-uploading-the-extension-file","title":"Step 3: Uploading the Extension File","text":""},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#uploading-files","title":"Uploading Files","text":"<p>Once the details are filled in, you will be prompted to upload an extension file. You can drag and drop your file into the designated area or browse your computer to select the file. The supported formats include .tar.gz, .tar.xz, and .zip, with a maximum size of 50 MB.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#successful-upload-confirmation","title":"Successful Upload Confirmation","text":"<p>After successfully uploading your file, you will see a confirmation message. If needed, you can change the file at this stage.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#step-4-selecting-a-template","title":"Step 4: Selecting a Template","text":""},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#kalp-template-selection","title":"KALP Template Selection","text":"<p>You can choose from a list of ready-to-use templates offered by KALP Studio. These templates can be selected from here and directly the smart contract is deployed, and amended as necessary before re-uploading to obtain API endpoints. This step helps you directly deploy smart contracts using pre-built templates.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#step-5-reviewing-and-deploying","title":"Step 5: Reviewing and Deploying","text":""},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#review-details","title":"Review Details","text":"<p>Review all the details of your smart contract, including the name, category, description, and selected template. Make sure everything is correct before proceeding.</p>"},{"location":"Getting-started/Kalp-Instant-Deployer/How-to-Deploy-a-Smart-Contract-on-Kalp-Studio/#deployment","title":"Deployment","text":"<p>Finally, click on \"Continue\" to deploy your smart contract. You will receive a confirmation message indicating that the new smart contract has been successfully deployed.</p> <p>Deploying a smart contract on Kalp Studio is a user-friendly process that involves subscribing to the smart contract deployer, entering contract details, uploading the necessary files, selecting a template, and reviewing before deploying. Follow these steps, and you'll have your smart contract deployed in no time.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/","title":"How to Create and Connect Wallet to Kalp Studio","text":""},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#how-to-create-and-connect-wallet-to-kalp-studio","title":"How to Create and Connect Wallet to Kalp Studio?","text":"<p>Creating or connecting a wallet on Kalp Studio is a straightforward process designed to ensure that users can manage their digital assets securely and efficiently. Here is a detailed guide to help you through each step of the process.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#1-access-the-wallet-section","title":"1. Access the Wallet Section","text":"<ul> <li>Navigate to the Wallet Section: After logging into Kalp Studio, go to the sidebar menu and click on the 'Wallet' option.</li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#2-add-a-new-wallet","title":"2. Add a New Wallet","text":"<p>Initiate Wallet Creation: Click on the \"+ Connect Wallet\" button. This will open the wallet creation interface.</p> <p> -   When the user clicks on the \"Connect Wallet\" button in the top navigation or within the wallet module, a pop-up will appear for connecting the wallet. The user then selects the \"Create New Wallet\" option.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#3-choose-wallet-type","title":"3. Choose Wallet Type","text":"<ul> <li> <p>Select Wallet Type: You will be presented with options to choose the type of wallet. Kalp Studio supports multiple types of wallets such as:</p> <ul> <li> <p>Self Custody Wallet</p> </li> <li> <p>Custodial Wallet</p> </li> <li> <p>MPC Wallet</p> </li> </ul> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#self-custody-wallet","title":"Self Custody Wallet","text":"<p>Self Custody Wallet: For this guide, we select 'Self Custody Wallet'. Click 'Continue' to proceed.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#1-configure-the-wallet","title":"1. Configure the Wallet","text":"<ul> <li> <p>Select Blockchain and Network: Choose the appropriate blockchain and network for your wallet. This ensures compatibility and proper functionality of your wallet within the ecosystem.</p> </li> <li> <p>Click 'Continue' after making your selections.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#2-generate-seed-phrase","title":"2. Generate Seed Phrase","text":"<ul> <li> <p>Secret Recovery Phrase: You will be provided with a 15-word seed phrase. This phrase is crucial for the security and recovery of your wallet.</p> </li> <li> <p>Save the Seed Phrase: Write down the seed phrase and store it securely. It is recommended to:</p> <ul> <li> <p>Save it in a password manager.</p> </li> <li> <p>Store it in a secure deposit box.</p> </li> <li> <p>Write it down and hide copies in multiple secret spots.</p> </li> </ul> </li> <li> <p>Do Not Share: Never share your seed phrase with anyone.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#3-confirm-seed-phrase","title":"3. Confirm Seed Phrase","text":"<ul> <li>Verification: To ensure you have correctly noted the seed phrase, you will need to confirm it by selecting each word in the correct order.</li> </ul> <ul> <li>Click 'Continue' after confirmation.</li> </ul> <p>After jotting down the seed phrase, you need to arrange the words accordingly.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#4-wallet-creation-successful","title":"4. Wallet Creation Successful","text":"<ul> <li> <p>Wallet Details: Once the seed phrase is confirmed, your wallet will be successfully created. You will be provided with your private and public keys.</p> </li> <li> <p>Copy and Secure: Copy these keys and store them securely. Your private key should be kept confidential.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#5-connect-an-external-wallet","title":"5. Connect an External Wallet","text":"<ul> <li> <p>Select a Provider: If you wish to connect an external wallet, you can select from various providers like Gemini, Binance, BitGo, etc.</p> </li> <li> <p>Setup and Connect: Follow the provider's instructions to set up and connect your wallet. Once connected, it will be available for use within Kalp Studio.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#select-mpc-wallet","title":"Select MPC Wallet","text":""},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#step-1-access-the-wallet-section","title":"Step 1: Access the Wallet Section","text":"<ul> <li> <p>Begin by logging into your KALP Studio account.</p> </li> <li> <p>On the left-hand menu, navigate to the Wallet section.</p> </li> </ul> <p></p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#step-2-configure-your-wallet","title":"Step 2: Configure Your Wallet","text":"<ul> <li> <p>After selecting the wallet type, you will be asked to choose the blockchain and network for your wallet.</p> <ul> <li> <p>Blockchain: Select the appropriate blockchain, such as KALP.</p> </li> <li> <p>Network: Choose between Testnet (for testing purposes) or Mainnet (for live transactions).</p> </li> </ul> </li> <li> <p>Once your selections are made, click Continue.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#step-4-sign-in-for-verification","title":"Step 4: Sign In for Verification","text":"<ul> <li>To proceed, you need to sign in or verify your account. You will see a prompt to sign in with Google or enter your email address.</li> </ul> <ul> <li>Enter your details, and you may be asked to verify your email by entering a code sent to your inbox.</li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Create-and-Connect-Wallet-to-Kalp-Studio/#step-5-wallet-creation-confirmation","title":"Step 5: Wallet Creation Confirmation","text":"<ul> <li> <p>Upon successful verification, your wallet will be created.</p> </li> <li> <p>A confirmation message will appear, indicating that the wallet has been created successfully.</p> </li> <li> <p>The platform will also credit your wallet with a certain amount of tokens (e.g., 50 Gini) for initial transactions or activities on the platform.</p> </li> </ul> <p>By following the steps outlined in this guide, you can set up various types of wallets, including Self Custody, Custodial, and MPC wallets. Each wallet type offers unique benefits tailored to different needs and preferences.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Navigate-To-kalp-studio-Wallet/","title":"How to Navigate To kalp studio Wallet","text":""},{"location":"Getting-started/Kalp-studio-wallet/How-to-Navigate-To-kalp-studio-Wallet/#how-to-navigate-to-kalp-studio-wallet","title":"How to Navigate To Kalp studio Wallet","text":"<p>Efficient digital asset management is crucial, and Kalp Studio offers a professional, user-friendly wallet feature. This guide will help you navigate and use the wallet interface, allowing you to connect, view, and manage your wallets with ease.</p>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Navigate-To-kalp-studio-Wallet/#step-by-step-guide-to-navigate-to-kalp-studio-wallet","title":"Step-by-Step Guide to Navigate to Kalp studio Wallet","text":"<p>1 .  Log in to Kalp Studio:</p> <ul> <li> <p>Open your web browser and go to the Kalp Studio login page.</p> </li> <li> <p>Enter your credentials (username and password) and log in to your account.</p> </li> </ul> <p>2 .  Access the Main Menu:</p> <ul> <li> <p>Once logged in, you will be directed to the dashboard.</p> </li> <li> <p>On the left-hand side, you will see the main menu with several options.</p> </li> </ul> <p>3 .  Navigate to Kalp studio Wallet Section:</p> <ul> <li> <p>In the main menu, locate the \"Wallet\" option. It is represented by an icon of a wallet.</p> </li> <li> <p>Click on the \"Wallet\" option to proceed to the wallet management page.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Navigate-To-kalp-studio-Wallet/#adding-a-wallet","title":"Adding a Wallet","text":"<p>Connect Wallet:</p> <ul> <li> <p>If you have not added a wallet yet, you will see a prompt on the screen saying, \"You need to add or create a wallet to reflect your balance here.\"</p> </li> <li> <p>Click on the \"+ Connect Wallet\" button to add a new wallet.</p> </li> </ul>"},{"location":"Getting-started/Kalp-studio-wallet/How-to-Navigate-To-kalp-studio-Wallet/#managing-your-wallet","title":"Managing Your Wallet","text":"<p>Once you have added your wallet, you can view and manage it efficiently. Here's how:</p> <p>1 .  Wallet Overview:</p> <ul> <li> <p>After connecting your wallet, you will see an overview of your wallet balance displayed prominently.</p> </li> <li> <p>The balance is shown in your chosen currency (e.g., USD).</p> </li> </ul> <p>2 .  View All Wallets:</p> <ul> <li>On the right side, there is a section titled \"All Wallets\" where you can see all the connected wallets along with their respective balances.</li> </ul> <p>3 .  Transactions:</p> <ul> <li>Below the wallet balance, you will find the \"Transactions\" section.</li> <li>This section lists all your transactions, including details such as Transaction ID, Amount/Fee, Time, Network, and Status.</li> <li>You can filter the transactions by Network or by type (e.g., Main Net, Test Net).</li> </ul> <p>4 .  Network and Blockchain Tabs:</p> <ul> <li> <p>Above the transaction list, you will see tabs to switch between \"Network\" and \"Blockchain\".</p> </li> <li> <p>This allows you to view transactions and balances specific to different networks and blockchains.</p> </li> </ul> <p>5 .  Disconnect Wallet:</p> <ul> <li>If you need to disconnect a wallet, click on the \"Disconnect\" button next to the wallet balance.</li> </ul> <p>By following these steps, you can easily navigate to and manage your kalp studio wallet within Kalp Studio dashboard, keeping track of your balances and transactions with ease.</p>"},{"location":"Getting-started/Onboarding/How-to-Change-the-Password/","title":"How to Change the Password","text":""},{"location":"Getting-started/Onboarding/How-to-Change-the-Password/#how-to-change-the-password","title":"How to Change the Password","text":"<p>The \"Forgot Password\" feature is an essential component of any website or platform that allows users to recover access to their accounts when they have forgotten their passwords.</p> <p>Resetting a password successfully is a seamless and straightforward process through the Kalp Studio. User(s) cannot enter Kalp Studio without logging in with the individual\u2019s email and a correct password, matching with the database.</p> <p>The below steps describe the user journey throughout the Reset Password process.</p> <p>Step 1:</p> <p></p> <p>Click console.kalp.studio to redirect to the Kalp Studio application page. Click on Forgot Password.</p> <p>Step 2:</p> <p></p> <p>Enter your email ID to receive a link to reset your password. Click on Submit. You will receive an OTP.</p> <p></p> <p>Enter the received OTP and click on Verify button.</p> <p>Step 3:</p> <p></p> <p>The reset password page is displayed on the screen. Enter your new password.</p> <p>Criteria for selecting a valid password</p> <ul> <li> <p>Password must contain at least 8-20 characters.</p> </li> <li> <p>It should always be an alphanumeric string.</p> </li> <li> <p>Password must contain at least one lowercase and uppercase letter.</p> </li> <li> <p>Password must contain at least one special character, including \u201c!, @, #, $, %, &amp;, *, (), -, +, =, ^\u201d</p> </li> <li> <p>The new password should not match the last 3 passwords.</p> </li> </ul> <p>Repeat your new password on the Confirm Password input box for confirmation.</p> <p>Click on Reset Password. You have successfully changed your password. You will get an email about the successful password change in your registered email ID.</p> <p>Click on Login Now to log in to the Kalp Studio application.</p> <p></p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/","title":"How to Sign Up and Log In to Kalp Studio Platform","text":""},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#how-to-sign-up-and-log-in-to-kalp-studio-platform","title":"How to Sign Up and Log In to Kalp Studio Platform","text":"<p>We acknowledge your self-reliance, but we're excited to stand by your side throughout your Kalp Studio experience. In addition, we'll provide you with valuable tips and information about how to make the most of Kalp Studio functionalities. Kalp Studio provides a streamlined process for signing up and logging into their platform. Follow the steps below to create an account and access the features of Kalp Studio.</p> <p>So, let\u2019s begin with your onboarding process on the Kalp Studio platform. </p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#step-by-step-guide-to-signing-up","title":"Step-by-Step Guide to Signing Up","text":"<p>Kalp Studio sign-up represents the user(s) first interaction with the platform before entering the login page of the Kalp Studio platform. If you are new to the platform, you must undergo the registration process via the signup page and verify your credentials.</p> <p>The below steps describe the user journey throughout the registration process.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#register-to-kalp-studio","title":"Register to Kalp Studio","text":"<p>Go to the Kalp Studio website and find the \"Register\" option.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#fill-in-your-details","title":"Fill in Your Details","text":"<p>Enter your first name, last name, desired username, email address, and password. Optionally, you can also provide your mobile number. Click on the \"Register\" button once all fields are filled.</p> <p>1 . Enter your Name and Last Name in the input box.</p> <p>Criteria for entering the Name:</p> <ul> <li> <p>Alphabetical Requirement: Your name should only contain letters (A-Z, a-z). No numbers or symbols.</p> </li> <li> <p>Length: It must be at least 3 characters and not exceed 25 characters. This ensures readability and compatibility with the system. </p> </li> </ul> <p>2 . Add Username</p> <p>Criteria for entering the Name:</p> <ul> <li>It must be unique.  </li> </ul> <p>3 . Enter your Email ID in the input box.</p> <p>Criteria for entering an Email ID:</p> <ul> <li>Format Compliance: Your email should follow the standard format, which is usually something like username@domainextension. This is necessary for communication and verification purposes. </li> </ul> <p>4 . Enter your Phone Number in the input box.</p> <p>Criteria for entering Phone number: It is country specific. Enter the phone number based on country code.</p> <p>5 . Enter the Password in the input box.</p> <p>Criteria for selecting a valid password:</p> <ul> <li> <p>Length: Your password needs to be a minimum of 8 characters but no more than 20. This range ensures security while being user-friendly.</p> </li> <li> <p>Uppercase Letter: At least one capital letter for added password strength.</p> </li> <li> <p>Lowercase Letter: At least one small letter to ensure complexity.</p> </li> <li> <p>Special Character: Include at least one character like !, @, $, #, or % for enhanced security.</p> </li> <li> <p>Number: At least one numeral is required for an additional layer of complexity. </p> </li> </ul> <p>6 .  Enter your Confirm Password in the input box.</p> <p>Matching Criteria: You need to re-enter your password to confirm it. This step is crucial to prevent typing errors in your password.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#verify-your-email","title":"Verify Your Email","text":"<p>After registration, you will be prompted to verify your email. Enter the OTP sent to your email address and click \"Verify\".</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#account-verification","title":"Account Verification","text":""},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#email-verified","title":"Email Verified","text":"<p>Once your email is verified, you will see a confirmation screen. Click \"Go to Profile\" to proceed.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#login-process","title":"Login Process","text":"<p>This section displays the Kalp Studio user Login feature. The Login feature is for existing users who have completed Sign up. After successful sign-up, a user is ready to use their account and log in to the portal.</p> <p>Verification Process</p> <p>Kalp Studio will place a call to the signed up user to confirm his successful login to the Kalp Studio application. You will be able to access the Kalp Studio platform after this verification.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#navigate-to-the-login-page","title":"Navigate to the Login Page","text":"<p>On the Kalp Studio website, find the \"Sign In\" option.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#enter-your-credentials","title":"Enter Your Credentials","text":"<p>Input your registered email address and password. Click on the \"Sign In\" button to access your account.</p> <p>You will reach the Dashboard.</p>"},{"location":"Getting-started/Onboarding/How-to-Sign-Up-and-Log-In-to-Kalp-Studio-Platform/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>Username Availability: If the username you selected is already taken, you will be prompted to choose another one.</p> </li> <li> <p>Resend OTP: If you did not receive the OTP for email or mobile verification, use the \"Resend\" option available on the verification screen.</p> </li> </ul> <p>By following these steps, you can easily sign up and log in to the Kalp Studio platform, ensuring a smooth and secure user experience.</p>"},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/","title":"How to Process KYC and get purchased template list","text":""},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/#how-to-process-kyc-and-get-purchased-template-list","title":"How to Process KYC, and get purchased template list","text":"<p>Kalp Studio platform offers various features to manage and monitor blockchain-related activities. Among its many capabilities, KYC (Know Your Customer) processes, and templates are vital for users who need to tailor their experience according to their preferences and requirements.</p>"},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/#access-the-kalp-studio","title":"Access the Kalp Studio","text":"<p>Log in to the Kalp Studio Platform and access the Dashboard.</p> <p></p> <p>Click on Get Started and the Kalp Instant Deployer dashboard will appear.</p>"},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/#accessing-the-settings","title":"Accessing the Settings","text":"<p>To begin KYC and templates, you'll need to navigate to the Settings section in Kalp Studio:</p> <ol> <li> <p>Login to Kalp Studio: Once logged in, you'll be directed to the Dashboard.</p> </li> <li> <p>Access Settings: On the left-hand side menu, you\u2019ll find various options. Click on Settings to access customization options.</p> </li> </ol>"},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/#completing-kyc-know-your-customer","title":"Completing KYC (Know Your Customer)","text":"<p>KYC verification is essential for using certain features within Kalp Studio, especially those related to financial transactions. Here\u2019s how you can complete your KYC:</p> <ol> <li> <p>Start KYC Process: In the Settings menu, click on the KYC tab. This will show your current KYC status. If it\u2019s pending, you\u2019ll see an option to Start KYC.</p> </li> <li> <p>Provide Necessary Information: Follow the prompts to provide your personal information, upload documents, and complete any other required steps.</p> </li> <li> <p>Submit and Wait for Verification: After submitting the required information, your KYC status will be updated to pending. It might take some time for the verification to be processed.</p> </li> </ol>"},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/#managing-templates","title":"Managing Templates","text":"<p>Templates in Kalp Studio are useful for standardizing contracts and other project-related documents. Here\u2019s how you can manage your templates:</p> <ol> <li> <p>Navigate to Templates: In the Settings section, click on the Template Purchased tab to view any existing templates you have access to.</p> </li> <li> <p>Download or Edit Templates: If you have purchased or created templates, you will see them listed here. You can download them for offline use or edit them directly in Kalp Studio.</p> </li> <li> <p>Purchase New Templates: If you need additional templates, you can explore and purchase them directly from Kalp Studio, ensuring they meet the specific needs of your project.</p> </li> </ol>"},{"location":"Getting-started/Settings/How-to-Process-KYC-and-get-purchased-template-list/#conclusion","title":"Conclusion","text":"<p>Completing KYC and managing templates in Kalp Studio are straightforward processes that enhance your control over your projects. By following the steps outlined in this guide, you can tailor the platform to suit your specific needs, ensuring a more efficient and personalized experience.</p> <p>For any further assistance or detailed walkthroughs, you can always reach out to the Help and Support section within Kalp Studio.</p>"},{"location":"Getting-started/Transaction-monitoring/How-can-I-monitor-all-my-transactions/","title":"How can I monitor all my transactions","text":""},{"location":"Getting-started/Transaction-monitoring/How-can-I-monitor-all-my-transactions/#how-can-i-monitor-all-my-transactions","title":"How can I monitor all my transactions","text":"<p>Monitoring transactions is crucial for managing and auditing financial activities, especially when dealing with blockchain and smart contracts. KALP Studio provides a comprehensive platform for monitoring transactions effectively.</p> <p>Access the Dashboard:</p> <p>Upon logging into Kalp Studio, you will land on the Dashboard. The dashboard provides an overview of your activities and quick access to essential features.</p> <p></p> <p>Locate the Sidebar Menu: On the left-hand side, you will find a vertical sidebar menu. This menu contains various options including:</p> <ul> <li> <p>Dashboard</p> </li> <li> <p>Credits</p> </li> <li> <p>Docs</p> </li> <li> <p>Wallet</p> </li> <li> <p>Help and Support</p> </li> </ul> <p>Select the 'Smart Contract' Option:</p> <p>Click on the Smart Contract tab in the sidebar. This will redirect you to the section dedicated to managing and deploying smart contracts.</p> <p></p> <p>Accessing the Transaction Monitoring Section</p> <p></p> <p>Once you log in to your Kalp Studio platform, navigate to the left-hand sidebar. Here, you will find multiple options including Dashboard, Smart Contract, API Gateway, Subscription, API Key Generation, and Settings. Click on \"Transaction Monitoring\" to access the relevant section.</p>"},{"location":"Getting-started/Transaction-monitoring/How-can-I-monitor-all-my-transactions/#subscription-to-transaction-monitoring","title":"Subscription to Transaction Monitoring","text":"<p>If you haven't subscribed to the Transaction Monitoring service, you will see a screen prompting you to subscribe. Simply click on the \"Subscribe Now\" button to activate this feature. Subscribing will enable you to monitor all transactions associated with your account.</p>"},{"location":"Getting-started/Transaction-monitoring/How-can-I-monitor-all-my-transactions/#viewing-your-transactions","title":"Viewing Your Transactions","text":"<p>Once subscribed, you will have access to the Transaction Monitoring dashboard. This section displays a list of smart contracts you have downloaded and used for transactions are displayed here, including their details such as ID, network type, and creation date.</p> <p></p> <p>You can search for specific transactions using the search bar at the top right by entering the transaction ID or name.</p>"},{"location":"Getting-started/Transaction-monitoring/How-can-I-monitor-all-my-transactions/#detailed-transaction-view","title":"Detailed Transaction View","text":"<p>To view detailed information about a specific smart contract, click on it from the list. This will open a detailed view where you can see the smart contract's ID, category, network, and description.</p> <p></p> <p>You will find a list of all transactions related to this smart contract, including details such as Transaction ID, Block ID, function (e.g., Mint, Burn), transaction hash, creation date, and status (Success or Failed).</p> <p>This detailed view allows you to track the status of each transaction, ensuring that you are aware of all successful and failed transactions.</p>"},{"location":"Getting-started/Transaction-monitoring/How-can-I-monitor-all-my-transactions/#conclusion","title":"Conclusion","text":"<p>KALP Studio provides a user-friendly and efficient way to monitor all your transactions. By subscribing to the Transaction Monitoring service, you can access detailed information about each smart contract and its associated transactions. This ensures that you have complete visibility and control over your financial activities, helping you maintain transparency and accountability in your operations.</p>"},{"location":"Introduction/Kalp-DLT/","title":"Kalp DLT","text":""},{"location":"Introduction/Kalp-DLT/#kalp-a-cross-chain-rwa-ecosystem","title":"\ud83d\udcf0 Kalp: A Cross-Chain RWA Ecosystem","text":"<p>In the dynamic sphere of Web3 ecosystems, navigating the intricacies of regulatory compliance for the tokenization of real-world assets (RWAs) and achieving real-world use cases present unique challenges, particularly within permissionless blockchain ecosystems. These challenges stem from the inherent nature of permissionless systems and the complexities of aggregating and managing liquidity fragmented across different blockchain networks. The Kalp Network aims to solve these hurdles through a hybrid cross-chain ecosystem optimized for the tokenization of regulated real-world assets and use cases that require adherence to stringent regulatory standards.</p> <p>Central to the Kalp Network is its innovative approach to enforcing security, efficiency, and compliance, facilitated by an identity layer that encompasses KYC verification and a Distributed Certificate Authority for user onboarding. This ensures a secure, reliable, and compliant environment for all participants, setting a new benchmark in the blockchain domain. The Kalp Network introduces a significant shift in how regulatory compliances are achieved in Web3 native DApps (Decentralized Applications), making the process more accessible, efficient, and transparent. By enabling a regulatory-compliant and decentralized Digital Public Infrastructure (DPI), Kalp lowers the entry barriers for builders to create DeFi DApps that can withstand the scrutiny of the law.</p>"},{"location":"Introduction/Kalp-DLT/#introduction","title":"\ud83d\udce9 Introduction","text":""},{"location":"Introduction/Kalp-DLT/#the-importance-of-a-regulatory-framework-in-blockchain","title":"The Importance of a Regulatory Framework in Blockchain","text":"<p>In the current narrative of blockchain and DeFi evolution, the tokenization of real-world assets (RWAs) represents a significant frontier, promising to unlock unprecedented liquidity and accessibility for assets ranging from real estate to fine art. However, the successful on-chain representation of these assets necessitates a regulatory-compliant framework that ensures security, verifiability, and seamless integration within the global financial ecosystem. This is where the Kalp Network positions itself as a pioneering solution, offering a comprehensive digital public infrastructure specifically designed for the regulated tokenization and subsequent liquidity of RWAs and real-world use cases.</p>"},{"location":"Introduction/Kalp-DLT/#real-world-asset-rwa-tokenization","title":"\ud83c\udfe2 Real World Asset (RWA) Tokenization","text":"<p>Real-world assets (RWAs) are tangible or intangible entities with defined monetary value that exist outside the digital realm. The tokenization of these assets represents a pivotal advancement in the bridge between traditional finance and the emerging sector of decentralized finance (DeFi). To integrate RWAs into the DeFi ecosystem, these assets undergo a transformation process known as tokenization. This process converts the value of an asset into a digital token, thereby encapsulating its monetary worth within a blockchain. Through tokenization, RWAs transcend their physical or intangible states to become digital tokens, enabling their value to be precisely represented and fluidly transacted on the blockchain.</p> <p>The spectrum of RWAs is broad, encompassing tangible assets like real estate and gold as well as intangible ones such as government bonds or carbon credits. Essentially, any asset that bears a well-defined monetary value can be tokenized and brought into the DeFi space as an RWA. This inclusivity paves the way for a diverse array of assets to enter the blockchain, enriching the DeFi ecosystem with a multitude of investment and trading opportunities.</p> <p>The purpose of migrating real-world assets onto the blockchain is rooted in the conviction that DeFi, over the long haul, will unveil unparalleled opportunities and market efficiencies for asset holders. These opportunities are perceived as being beyond the reach of the traditional financial systems, marked by their centralized structures and inherent limitations. The DeFi space, with its inherent decentralization, transparency, and accessibility, promises to redefine asset management and investment, offering a more inclusive and efficient alternative to conventional financial practices. By bringing RWAs onto the blockchain, DeFi stands to unlock a new realm of financial innovation, offering asset holders novel ways to leverage, trade, and invest their assets within a decentralized and open financial system.</p>"},{"location":"Introduction/Kalp-DLT/#bringing-the-next-1-billion-users-to-web3-through-rwa-tokenization","title":"\ud83d\udc63 Bringing the Next 1 Billion Users to Web3 Through RWA Tokenization","text":"<p>The integration of real-world asset (RWA) tokenization into the Web3 ecosystem represents a strategic pivot towards inclusivity, stability, and trust. This transition is not merely technological but encompasses a broader appeal to traditional Web2 users by addressing common concerns and offering unprecedented opportunities. Web3 can welcome the next billion users by harnessing less volatile RWA tokens, implementing trust through rigorous KYC/KYB and due diligence, providing fixed stable yields, and opening doors to diversified investment opportunities.</p>"},{"location":"Introduction/Kalp-DLT/#appeal-of-less-volatile-tokens","title":"Appeal of Less Volatile Tokens","text":"<p>Traditional investors and Web2 users have often been wary of the high volatility associated with cryptocurrency markets. The introduction of RWA tokens, backed by tangible and intangible assets with inherent value, offers a much-needed stabilizing influence. These tokens provide a bridge between the familiar world of traditional investments and the innovative potential of Web3, making the latter more accessible and appealing to a broader audience. The inherent stability of RWAs, such as real estate, gold, and government bonds, reflected in their tokenized forms, reassures traditional investors about entering the Web3 domain.</p>"},{"location":"Introduction/Kalp-DLT/#investors-safety-building-trust-through-due-diligence","title":"Investor\u2019s Safety: Building Trust Through Due Diligence","text":"<p>Trust is a crucial factor in attracting Web2 users to any new platform or technology. In the realm of Web3, this trust can be significantly bolstered through stringent Know Your Customer (KYC) and Know Your Business (KYB) processes, coupled with thorough due diligence procedures. By ensuring that all participants and transactions comply with established legal and regulatory frameworks, Web3 platforms can mitigate risks and protect users. This level of transparency and accountability is essential in building confidence among traditional users, who may be accustomed to the regulated environments of traditional banking and finance.</p>"},{"location":"Introduction/Kalp-DLT/#offering-fixed-stable-yield","title":"Offering Fixed, Stable Yield","text":"<p>One of the compelling features that can draw traditional investors to Web3 is the promise of fixed, stable yields on investments. Unlike the speculative and highly volatile returns seen in much of the cryptocurrency space, RWA tokenization can offer more predictable and stable returns, similar to traditional fixed-income investments. This predictability, rooted in the real-world value of the underlying assets, makes Web3 platforms more attractive to those seeking reliable investment vehicles, including retirees, conservative investors, and those new to the digital asset space.</p>"},{"location":"Introduction/Kalp-DLT/#diversified-investment-opportunities","title":"Diversified Investment Opportunities","text":"<p>The tokenization of RWAs opens up a world of diversified investment opportunities previously inaccessible to many due to high entry barriers or a lack of liquidity. From fractional ownership in real estate to participation in the global art market or investing in renewable energy projects, RWA tokens democratize access to a wide range of assets. This diversification not only spreads investment risk but also caters to the varied interests and ethical considerations of a broad user base, making Web3 platforms more appealing to individuals seeking to align their investments with their values and interests.</p>"},{"location":"Introduction/Kalp-DLT/#economic-potential-of-bringing-rwas-on-chain","title":"\ud83e\udd84 Economic Potential of Bringing RWAs On-Chain","text":"<p>The cryptocurrency market has experienced explosive growth over the past decade, culminating in a current market capitalization of approximately $2.8 trillion. This growth reflects an increasing acceptance of cryptocurrencies as both a speculative investment and a revolutionary financial technology. Bitcoin, the original cryptocurrency, continues to dominate the market, but the emergence of thousands of altcoins has diversified the investment landscape, offering a wide range of technological innovations and use cases beyond simple currency or store of value. Data indicate that the market is not only expanding in terms of capitalization but also in complexity, with the rise of decentralized finance (DeFi), non-fungible tokens (NFTs), and other blockchain-based assets contributing to the market's growth.</p>"},{"location":"Introduction/Kalp-DLT/#projected-market-cap-of-rwa-tokens","title":"Projected Market Cap of RWA Tokens","text":"<p>Real World Asset (RWA) tokens represent a new frontier in the evolution of decentralized finance and alternate investments. By tokenizing real-world assets such as real estate, precious metals, or even fine art, RWA tokens aim to make these assets more accessible, liquid, and divisible, potentially unlocking trillions of dollars in value. Conservative estimates project that the market cap of RWA tokens could reach approximately $30 trillion in the coming years, effectively tripling the current market cap of the broader cryptocurrency sector.</p> <p>The realization of this potential, however, hinges on several factors, including regulatory clarity, technological infrastructure, and market adoption. Should these factors align favorably, the infusion of RWA tokens into the cryptocurrency market could not only expand the market's capitalization but also fundamentally transform how assets are bought, sold, and owned across the globe.</p>"},{"location":"Introduction/Kalp-DLT/#prerequisites-to-bring-real-world-assets-onto-the-chain","title":"\ud83d\udec2 Prerequisites to Bring Real-World Assets Onto the Chain","text":""},{"location":"Introduction/Kalp-DLT/#tokenization","title":"Tokenization","text":"<p>The tokenization of real-world assets (RWAs) is a complex process that requires meticulous attention to regulatory compliance, technological infrastructure, and the establishment of trust with participants.</p> <ul> <li>Binding RWA and Tokens with High Due Diligence Standards: The tokenization process necessitates a rigorous due diligence framework to ensure the authenticity, legality, and value of the real-world assets being tokenized. This involves comprehensive vetting processes, legal checks, and valuation assessments to maintain high integrity and trust in the tokenized assets.</li> <li>On-Chain Ownership and Decentralization: Introducing RWAs to the blockchain allows for the decentralization of ownership records. Smart contracts enable the decentralized execution of ownership transfers, reducing reliance on traditional centralized entities and enhancing transaction efficiency.</li> <li>Immutable Ownership Records for Audit Trails: Blockchain technology ensures that ownership records are immutable and transparent. This capability provides a robust audit trail for all transactions, enhancing security and trust among participants and facilitating compliance with regulatory standards.</li> <li>Regulatory Landscape Certainty: Navigating the regulatory landscape is crucial for the successful tokenization of RWAs. Token issuers must ensure compliance with existing securities, commodities, and banking laws, adapting to the evolving regulatory environment to provide clarity and security for investors.</li> <li>Permissioned Architecture and Strict KYC/AML Compliance: Implementing a permissioned blockchain architecture can help in meeting regulatory requirements, including Know Your Customer (KYC) and Anti-Money Laundering (AML) compliance. This setup restricts access to authorized participants only, enabling more controlled and compliant transaction processes.</li> <li>Embedded Applicable Laws: The tokenization process must incorporate the applicable laws directly within the smart contracts governing the tokens. This ensures that all transactions automatically comply with the relevant legal requirements, providing a seamless legal framework for token issuance and transfer.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#liquidity","title":"\ud83d\udcb0 Liquidity","text":"<p>Out of all the hurdles that exist, the most significant one in the tokenization of RWAs is the fragmentation of users across different blockchain networks, which can hinder liquidity. Enhancing liquidity for tokenized RWAs involves several strategic approaches:</p> <ul> <li>Strategic Asset Curation: Carefully curating the assets to be tokenized is vital for building trust and ensuring liquidity. Assets with clear, less ambiguous valuations are preferred, as they provide investors with confidence in the underlying value of the tokens.</li> <li>Unified and Aggregated Market for Buyers and Sellers: Creating a unified marketplace that aggregates buyers and sellers from different jurisdictions is essential for enhancing liquidity. This involves ensuring that the same asset is available across all chains and exchanges, providing a seamless experience for users.</li> <li>Seamless Experience for Users: A user-friendly platform that offers a seamless experience is crucial for attracting and retaining participants. This includes intuitive interfaces, straightforward transaction processes, and comprehensive support services.</li> <li>High-Yielding Assets: Focusing on assets that offer high yields can attract investors looking for lucrative opportunities. These assets often come with higher risks, so transparent risk assessments and disclosures are essential.</li> <li>Regulated Ecosystem Partners: Collaborating with regulated exchanges, custodian wallets, and third-party due diligence partners of global repute ensures that the ecosystem operates within legal boundaries. This regulatory framework provides additional security and trust for participants, further enhancing liquidity.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#limitations-of-current-blockchain-ecosystems","title":"Limitations of Current Blockchain Ecosystems","text":""},{"location":"Introduction/Kalp-DLT/#traditional-blockchains-are-monolithic","title":"Traditional Blockchains are Monolithic","text":"<p>Monolithic blockchains embody data settlement and are bundled within a single layer. This architecture, while simple and secure, faces challenges such as inflexibility and scalability issues. The single consensus mechanism and the inherent rigidity make these blockchains resistant to changes and vulnerable to network congestion during high-demand periods.</p>"},{"location":"Introduction/Kalp-DLT/#challenges-in-innovation","title":"Challenges in Innovation","text":"<p>The properties of permissionless blockchains often result in a slower pace of innovation due to the consensus required for any significant changes. This structure, while promoting security and decentralization, limits the system's flexibility to adapt to new requirements or improvements efficiently.</p>"},{"location":"Introduction/Kalp-DLT/#vulnerability-to-forks","title":"Vulnerability to Forks","text":"<p>Permissionless blockchains are prone to forks, both soft and hard, as a result of disagreements within the community regarding protocol upgrades or changes. While forks can democratize decision-making, they also lead to community and network fragmentation, which can dilute the blockchain's integrity and value.</p>"},{"location":"Introduction/Kalp-DLT/#the-need-for-multi-language-support-in-smart-contracts","title":"The Need for Multi-Language Support in Smart Contracts","text":"<p>The dominance of a single programming language like Solidity for smart contracts on platforms such as Ethereum has highlighted the need for supporting multiple programming languages. This inclusion would lower the barrier to entry for developers unfamiliar with Solidity, diversify the developer base, and potentially enhance the security and functionality of smart contracts by leveraging the strengths of various programming languages.</p>"},{"location":"Introduction/Kalp-DLT/#kycaml-compliances","title":"KYC/AML Compliances","text":"<p>The absence of built-in KYC/AML compliance mechanisms within the blockchain protocols necessitates the integration of externally trusted KYC providers. These providers act as oracles, verifying the identities and legal statuses of participants to ensure regulatory compliance and maintain the integrity of the blockchain ecosystem.</p>"},{"location":"Introduction/Kalp-DLT/#centralization-concerns","title":"Centralization Concerns","text":"<p>Despite the decentralized ideal of blockchain technology, practical deployments have shown a trend towards centralization, particularly in proof-of-stake (PoS) blockchains where significant financial investment is required to participate as a validator. This economic barrier to entry creates disparities in network participation and raises concerns about the centralization of power among a few wealthy nodes. The concentration of the majority of nodes in control of a few entities running on a handful of cloud providers' nodes adds to the dangers of centralization that are evident in the distribution of nodes in the current Ethereum network.</p>"},{"location":"Introduction/Kalp-DLT/#mitigating-malicious-attacks","title":"Mitigating Malicious Attacks","text":"<p>The public visibility of node IP addresses in permissionless chains exposes the network to Byzantine attacks, such as DDoS attacks. Enhancing anonymity while maintaining decentralization is crucial for safeguarding against such vulnerabilities and ensuring the security and privacy of transactions and network participants.</p>"},{"location":"Introduction/Kalp-DLT/#fragmentation-of-public-and-private-networks","title":"Fragmentation of Public and Private Networks","text":"<p>The fragmentation between public and private blockchain networks challenges the seamless exchange of information and value, leading to isolated liquidity pools. Developing protocols for secure and trusted cross-network communication is essential for leveraging the decentralization of public chains while maintaining the privacy and compliance features of private networks. This integration would enable a more unified and efficient blockchain ecosystem, capable of supporting a wide range of applications and use cases across different sectors.</p> <p>To achieve mass Web3 adoption, Kalp addresses the limitations in the current blockchain landscape, i.e., regulatory clarity, interoperable infrastructure, and advancements in scalability and security. By overcoming existing challenges and fostering collaboration between traditional finance and DeFi, Kalp aims to unlock a new era of financial innovation and empowerment to democratize access to financial opportunities that have previously been out of reach due to high entry barriers.</p>"},{"location":"Introduction/Kalp-DLT/#kalp-a-hybrid-cross-chain-ecosystem","title":"\ud83e\udd16 Kalp: A Hybrid Cross-Chain Ecosystem","text":"<p>The Kalp ecosystem leverages a multi-chain architecture, incorporating both public and private permissioned sub-networks or parachains, to offer an end-to-end platform for digital asset creation and management. This architecture meticulously enforces KYC (Know Your Customer) and KYB (Know Your Business) compliance protocols, ensuring a secure and compliant operational environment. Within this ecosystem, users are provided with flexible custody solutions, including self-custody wallets for heightened security and autonomy, as well as the option of integrated third-party custodian wallets, catering to a broad spectrum of security and regulatory needs.</p> <p>Complementing the Kalp ecosystem's internal interoperability is its sophisticated cross-chain communication protocol. This protocol is architected to facilitate the movement of messages and assets not only within the Kalp network but also across popular permissionless chains. By leveraging a combination of state-of-the-art cryptographic algorithms, address whitelisting mechanisms and smart contract interfaces, the protocol ensures that cross-chain interactions are both secure and efficient. This encompasses a broad spectrum of functionalities, from asset transfer and smart contract invocation to data sharing and verification across blockchain boundaries.</p> <p></p>"},{"location":"Introduction/Kalp-DLT/#kalp-public-and-permissioned-multi-chain-network","title":"\u26d3\ufe0f Kalp Public and Permissioned Multi-Chain Network","text":"<p>The Kalp Public and Permissioned Multi-Chain Network leverages its robust and modular architecture to deliver a scalable blockchain infrastructure. This network's structure is strategically distributed across multiple cloud service providers, including AWS, GCP, and Azure, as well as on-premise machines, ensuring redundancy, high availability, and geographical diversification. The architecture is fundamentally modular, facilitating the segregation of critical operational layers such as execution, consensus, and transaction gateway. This modular design not only enhances the system's efficiency and scalability but also enables tailored configurations to meet specific enterprise needs.</p>"},{"location":"Introduction/Kalp-DLT/#inter-chain-communication","title":"Inter-Chain Communication","text":"<p>Kalp Network's functionality offers a sophisticated inter-chain communication mechanism. This framework is engineered to facilitate secure and efficient data transfer and transaction execution across various chains within the Kalp ecosystem or other conventional blockchains.</p>"},{"location":"Introduction/Kalp-DLT/#compliance-and-privacy-features","title":"\ud83d\udd0f Compliance and Privacy Features","text":"<p>The Permissioned Space of the Kalp Network is fortified with an array of compliance and privacy features, specifically designed to align with the rigorous standards of regulated industries and obey the law of land. Kalp provides a foundational compliance structure that is adaptable to diverse regulatory requirements.</p> <p>Beyond robust security, the Kalp ecosystem prioritizes AML and CTF protection through a suite of cutting-edge, privacy-preserving technologies. The cornerstone of this suite is the Kalp Insight analytics tool. This ingenious tool delves into network operations, gleaning valuable insights without compromising user anonymity. It achieves this feat through sophisticated data analysis techniques that prioritize confidentiality and adherence to digital privacy regulations.</p> <p>Furthermore, the Kalp ecosystem boasts a one-of-a-kind compiler, a specialized program meticulously designed to safeguard legal compliance within the network. This AI-driven compiler scrutinizes smart contracts against pre-established legal frameworks. By doing so, it ensures that every deployed smart contract adheres to the necessary regulatory standards. This safeguard effectively mitigates potential legal and operational risks, fostering a trustworthy and secure environment.</p>"},{"location":"Introduction/Kalp-DLT/#private-permissioned-enterprise-grade-private-chains","title":"Private-Permissioned Enterprise-Grade Private Chains","text":"<p>Enterprise-grade blockchain ecosystems cater to the specific needs of businesses and organizations looking to leverage the power of blockchain technology in a secure and controlled environment. These needs differ from those of public blockchains, where anyone can participate.</p> <ul> <li>Security and Privacy: Enterprises deal with sensitive data and require robust security measures. Kalp\u2019s private, permissioned blockchains restrict access and participation, ensuring only authorized parties can interact. Additionally, the high-availability nodes holding ledgers and world state data are unavailable outside the jurisdiction of the enterprises.</li> <li>Compliance: Businesses must adhere to various regulations, depending on their industry. The ecosystem provides tools to help adhere to established legal compliances. This ensures all deployed contracts meet regulatory standards.</li> <li>Scalability and Performance: Public blockchains can struggle with large transaction volumes. Enterprise-grade ecosystems are designed for high throughput and scalability, allowing businesses to handle a significant number of transactions efficiently. Kalp offers faster pluggable consensus choices, such as RAFT for private enterprise chains.</li> <li>Interoperability: The ability for different chains to work together seamlessly is crucial. The Kalp ecosystem facilitates smooth interaction between various chains within and outside the ecosystem.</li> </ul> <p>Enterprise-grade private chains within the Kalp Network focus on blockchain customization, integration, and security, specifically architected to cater to the unique needs of corporate entities. These chains provide a highly secure, compliant, and adaptable blockchain solution, enabling enterprises to leverage blockchain technology's full potential while aligning with their operational, legal, and technical requirements.</p>"},{"location":"Introduction/Kalp-DLT/#customization-capabilities","title":"Customization Capabilities","text":"<p>The Kalp Network facilitates a remarkable degree of customization for its enterprise-grade private chains, beginning with the \"one-click Kalp chain deployment\" feature. This streamlined deployment process allows for rapid setup and configuration of private chains, significantly reducing the technical barriers to blockchain adoption. Further customization is available in the form of selectable consensus algorithms, allowing enterprises to choose the mechanism that best fits their use case, be it for efficiency, security, or decentralization.</p> <ul> <li>Access Control: Kalp chains are associated with distributed certificate authority that allows the creation of X.509 certificates known for their robust RBAC functionalities. The certificates help in validating the origin of a transaction.</li> <li>Solutions for Specific Needs: Different industries and applications have unique requirements. Customization allows businesses to build blockchain solutions that cater to their specific workflows, data privacy needs, and regulatory compliance. For example, a supply chain management system might require different features compared to a secure voting platform.</li> <li>Enhanced Efficiency and Performance: By customizing the consensus mechanism (how transactions are validated), data structures, and smart contract functionalities, businesses can optimize the blockchain for their specific use cases. This can lead to faster transaction processing, reduced costs, and improved overall efficiency.</li> <li>Integration with Existing Systems: Early adopters who leverage customization to create innovative blockchain solutions can gain a competitive edge. They can streamline operations, improve transparency, and build trust with customers in a way that generic blockchain platforms might not allow.</li> <li>Future-proofing the Network: The ability to customize the blockchain allows for easier adaptation to evolving regulations and industry standards. By building a flexible infrastructure, businesses can ensure their blockchain solution remains relevant and effective in the long run.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#integration-with-enterprise-systems","title":"Integration with Enterprise Systems","text":"<p>Integration capabilities are a cornerstone of the Kalp Enterprise Grade Private Chains, featuring REST-based transaction signing through custodian wallets. This approach allows for seamless integration with existing enterprise resource planning (ERP) systems, databases, and other critical software infrastructure. The REST interface facilitates easy integration with a wide range of systems, enabling enterprises to maintain their existing workflows and systems while incorporating blockchain technology's benefits.</p>"},{"location":"Introduction/Kalp-DLT/#security-and-compliance-protocols","title":"Security and Compliance Protocols","text":"<p>Kalp ecosystem provides support for self-custody wallets where end users have complete autonomy over their private keys, as well as third-party key custody wallets using Hashicorp vault. This ensures that cryptographic keys are managed in a secure manner, reducing the risk of unauthorized access and improving the user experience.</p> <p>Support for Hardware Security Module (HSM) integration further enhances security, allowing enterprises to leverage dedicated hardware for key management and cryptographic operations. Fine-grained access control mechanisms are implemented throughout the Kalp Network, enabling precise control over who can access what data and functionalities within the blockchain, ensuring that sensitive operations and data remain secure and compliant with internal policies and regulatory standards.</p>"},{"location":"Introduction/Kalp-DLT/#the-importance-of-a-third-party-key-custody-vault-in-the-kalp-ecosystem","title":"The Importance of a Third-Party Key Custody Vault in the KALP Ecosystem","text":"<ul> <li>Policy-based Management: Vault acts as a central repository, securely storing and managing these keys, eliminating the need to distribute them across various systems or devices. This centralized approach simplifies key management and access control.</li> <li>Enhanced Security: It employs robust encryption techniques to protect keys at rest and in transit. Additionally, it integrates with various authentication methods, ensuring only authorized users can access specific keys. This multi-layered security approach safeguards the network from unauthorized access and potential breaches.</li> <li>Fine-grained Access Control: Permissions can be assigned based on user roles and specific needs. This minimizes the risk of unauthorized key usage and strengthens overall security.</li> <li>Improved Operational Efficiency: Vault automates key rotation and lifecycle management, streamlining operations and reducing the risk of human error. This frees up IT resources to focus on other critical tasks.</li> <li>Support for Diverse Key Types: Vault offers comprehensive support for a wide range of key types, ensuring compatibility with different blockchain platforms and protocols.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#kalps-presence-in-permissionless-chains","title":"\ud83c\udfab Kalp\u2019s Presence in Permissionless Chains","text":"<p>The permissionless facet of the Kalp Network is engineered to embody the essence of decentralization while simultaneously addressing the pivotal need for regulatory compliance and security in blockchain ecosystems. This caters to an expansive user base, emphasizing inclusivity and fostering an environment ripe for community-driven innovation and development.</p>"},{"location":"Introduction/Kalp-DLT/#kalp-system-chain","title":"Kalp System Chain","text":"<p>The Kalp System Chain is a pivotal infrastructure within the Kalp Network, designed to uphold the network's foundational principles of regulatory compliance and seamless interoperability. It functions as the custodian of GDPR-compliant KYC (Know Your Customer) and KYB (Know Your Business) information for all network participants, establishing a trust framework essential for a secure and compliant blockchain ecosystem.</p>"},{"location":"Introduction/Kalp-DLT/#gdpr-compliant-information-storage","title":"GDPR-Compliant Information Storage","text":"<p>At its core, the Kalp System Chain securely stores and manages KYC and KYB information. The Kalp System Chain acts as the secure vault for Know Your Customer (KYC) and Know Your Business (KYB) information, the lifeblood of trust within the network. This robust system prioritizes GDPR compliance at every stage. End-to-end encryption safeguards data in transit and at rest, while sophisticated anonymity techniques hide identities without compromising verification. Furthermore, meticulous access controls ensure only authorized users can access specific information. This multi-layered approach provides the highest standards of privacy and security for participant data.</p> <p>The Kalp System Chain empowers participants by incorporating verifiable consent mechanisms; it grants individuals complete control over their individual data. This aligns with the core principles of GDPR, fostering trust and transparency within the ecosystem.</p>"},{"location":"Introduction/Kalp-DLT/#whitelisting-users-in-permissionless-chains","title":"Whitelisting Users in Permissionless Chains","text":"<p>The advent of cross-chain messaging protocols and their integration in Kalp has made it feasible to integrate whitelisting features in other networks, enabling a new layer of control and security for decentralized applications (DApps). Through cross-chain messages, information about whitelisted users can be securely transmitted and verified across different blockchain networks, allowing DApps to restrict access to approved participants. This approach leverages the inherent strengths of permissionless chains\u2014such as Ethereum and Binance Smart Chain\u2014while incorporating a level of regulatory compliance and user validation typically reserved for permissioned systems.</p>"},{"location":"Introduction/Kalp-DLT/#kalp-cross-chain-liquidity-protocol","title":"Kalp Cross-Chain Liquidity Protocol","text":"<p>The Kalp Cross-Chain Liquidity Protocol is engineered to facilitate permissioned liquidity and asset exchanges across different blockchain networks. This protocol leverages smart contracts across chains and decentralized finance (DeFi) mechanisms to create a secure, efficient, and user-friendly environment for cross-chain asset swaps and liquidity provision through cross-chain order fulfillment.</p>"},{"location":"Introduction/Kalp-DLT/#relay-routers","title":"Relay Routers","text":"<p>Relay routers are a critical innovation within the Kalp Network's permissionless space, designed to bridge the communication gap between the Kalp ecosystem and other permissionless blockchains. These routers act as distributed nodes that relay messages and transactions across different blockchain networks, enabling a wide range of interoperability use cases.</p> <p>These relay routers seamlessly encode and decode messages and transactions between the Kalp ecosystem and other permissionless blockchains. This unlocks a vast array of interoperability use cases. Data flows freely, fostering collaboration and innovation across diverse blockchain environments. Developers can leverage the unique strengths of different blockchains to build robust, rich, and more powerful applications.</p>"},{"location":"Introduction/Kalp-DLT/#kalp-ecosystem-node-architecture","title":"\ud83d\udda5\ufe0f Kalp Ecosystem Node Architecture","text":"<p>The Kalp ecosystem utilizes a diverse set of nodes to maintain its infrastructure, security, and functionality. These nodes provide a robust structure to the Kalp ecosystem to facilitate the groundbreaking functionalities added with diverse and unique roles, from executing smart contracts and facilitating consensus to ensuring interoperability between multiple Kalp chains as well as between Kalp chains and different external blockchain networks that also follow regulatory compliance and provide architectural scalability.</p>"},{"location":"Introduction/Kalp-DLT/#execution-layer-nodes","title":"Execution Layer Nodes","text":"<p>Execution Layer Nodes are responsible for the execution of smart contracts within the Kalp ecosystem. These nodes evaluate the business logic of transactions as dictated by smart contracts and endorse the transactions as valid before they are added to the ledger. In the Kalp ecosystem, this execution layer is a separate entity that is independent and thus minimizes the processing power of the network and creates efficient environments to facilitate smooth communication.</p>"},{"location":"Introduction/Kalp-DLT/#functionality","title":"Functionality","text":"<ul> <li>Smart Contract Execution: They execute the code of smart contracts upon receiving transactions that invoke the contract.</li> <li>Transaction Validation: Post-execution, they validate the transaction against the smart contract's stipulated rules and conditions.</li> <li>Endorsement: Once a transaction is validated, the execution layer node signs it, serving as a proof of execution and validation.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#smart-contract-execution","title":"Smart Contract Execution","text":"<ul> <li>Triggering by Transactions: Similar to other blockchains, transactions initiate smart contract execution on KALP. These transactions involve invoking specific functions within the deployed smart contract.</li> <li>Execution Environment: Unlike traditional blockchains that rely on Proof of Work (PoW) for mining, KALP utilizes a different consensus mechanism, Smart-BFT, for transaction validation. This led to a more efficient execution environment optimized for smart contracts.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#transaction-validation","title":"Transaction Validation","text":"<ul> <li>Pre- and Post-Execution Checks: Similar to other blockchains, KALP performs pre-execution checks to ensure the transaction adheres to the network's fee structure and has sufficient funds associated with it. Post-execution checks validate the transaction's outcome against the smart contract's logic and state changes.</li> <li>Consensus Mechanism: The chosen consensus mechanism on KALP would play a crucial role in transaction validation. Validators on the network are responsible for verifying the transaction's execution and ensuring it complies with the smart contract's rules, regulatory compliance, and.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#endorsement","title":"Endorsement","text":"<ul> <li>Validator Roles: Validators on the KALP network endorse transactions after successful execution and validation. This endorsement serves as proof of the transaction's legitimacy and immutability on the blockchain.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#additional-considerations-for-kalp","title":"Additional Considerations for KALP","text":"<ul> <li>Scalability: Since smart contract execution is resource-intensive, KALP's design considers scalability solutions to handle a high volume of transactions.</li> <li>Security: Security is paramount for smart contracts. KALP should implement robust security measures to prevent vulnerabilities and exploits within smart contracts. This could involve formal verification techniques and secure coding practices.</li> </ul> <p>By incorporating these elements, KALP can create a secure and efficient environment for smart contract execution, transaction validation, and endorsement.</p>"},{"location":"Introduction/Kalp-DLT/#high-data-availability-nodes","title":"High Data Availability Nodes","text":"<p>High Data Availability (HDA) Nodes are pivotal in replicating and storing ledger data across the Kalp ecosystem. They ensure that the network remains robust and that data loss is minimized.</p>"},{"location":"Introduction/Kalp-DLT/#functionality_1","title":"Functionality","text":"<ul> <li>Data Replication: These nodes replicate ledger data to ensure redundancy and high availability.</li> <li>Data Retrieval: They facilitate quick data retrieval for validating transactions or querying ledger history.</li> <li>Fault Tolerance: Through data replication, they contribute to the network's fault tolerance, ensuring its resilience against data loss.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#orderer-nodes","title":"Orderer Nodes","text":"<p>Orderer nodes are critical for maintaining the integrity and order of transactions within the Kalp ecosystem. They sequence transactions into blocks and distribute them across the network.</p>"},{"location":"Introduction/Kalp-DLT/#functionality_2","title":"Functionality","text":"<ul> <li>Transaction Ordering: They establish a consistent order for transactions, which is essential for maintaining the ledger's integrity.</li> <li>Block Creation: After ordering, they package transactions into blocks.</li> <li>Block Distribution: These nodes distribute the created blocks to all nodes responsible for maintaining the ledger.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#gateway-nodes","title":"Gateway Nodes","text":"<p>Gateway nodes serve as the primary interface between the participants of the Kalp ecosystem and its underlying blockchain infrastructure. These nodes facilitate the secure and efficient submission of transactions to the network, acting as a conduit for communication and data flow.</p>"},{"location":"Introduction/Kalp-DLT/#functionality_3","title":"Functionality","text":"<ul> <li>Transaction Submission: Gateway nodes receive transactions from users or applications, acting as the initial point of entry into the Kalp ecosystem. They perform preliminary checks on the transaction's structure and authenticity.</li> <li>Routing: After initial validation, they route transactions to the appropriate channels within the network, ensuring that each transaction reaches the correct destination for further processing. This includes directing transactions to endorsement nodes for smart contract execution and validation.</li> <li>Security and Anonymity: These nodes enhance the network's security by implementing protocols that protect user privacy and data integrity. They mask the details of transaction originators, providing an additional layer of anonymity and safeguarding against potential network attacks.</li> <li>Interface Provision: Gateway nodes offer a RESTful API interface, enabling developers to interact with the blockchain easily. This interface simplifies the process of sending transactions, querying the state of the blockchain, and listening for events, making development on the Kalp ecosystem accessible and efficient.</li> <li>Load Balancing and Scalability: To manage network traffic and maintain high performance, gateway nodes employ load-balancing techniques. They distribute incoming requests evenly across the network, preventing any single node from becoming a bottleneck. This is crucial for scalability as the ecosystem grows in size and transaction volume.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#tokenomics-and-governance-in-the-kalp-ecosystem","title":"\ud83d\udcc8 Tokenomics and Governance in the KALP Ecosystem","text":"<p>Ginni is the economic instrument or currency designed to underpin the ecosystem's financial stability and incentivize active, meaningful participation. The network participants of the Kalp ecosystem are paid in Gini.</p>"},{"location":"Introduction/Kalp-DLT/#token-distribution-and-schedule","title":"Token Distribution and Schedule","text":"<p>The KALP foundation has instituted a hard cap of $1 billion for Gini tokens, allocated across various stakeholders to ensure balanced ecosystem development. The distribution includes:</p> <ul> <li>Founders &amp; Team (20%): Encouraging long-term commitment with a 6-month cliff, followed by a gradual monthly release over four years.</li> <li>Foundation/Endowment (15%): Allocated for foundational growth with no initial cliff and a four-year monthly unlocking schedule.</li> <li>Ecosystem Reserve (45%): To support the ecosystem's expansion and sustainability, distributed monthly over four years without an initial cliff.</li> <li>Seed Sale (5%) and Private Sale (5%): Early support is rewarded with tokens unlocking quarterly over two years.</li> <li>Airdrop (3%) and Public Sale (7%): Enhancing community engagement with quarterly unlocks for airdrops and instant access for public sale tokens.</li> </ul>"},{"location":"Introduction/Kalp-DLT/#governance-and-economic-resilience","title":"Governance and Economic Resilience","text":"<p>Gini's governance is deeply interwoven with a DAO structure, ensuring democratic decision-making and equitable network evolution. The token's design emphasizes long-term network health and value creation, with a governance model that supports transparent, fair decision-making through smart contracts. AI-enhanced systems monitor and adjust incentives, ensuring alignment with ecosystem goals.</p>"},{"location":"Introduction/Kalp-DLT/#incentives-for-sustainable-growth","title":"Incentives for Sustainable Growth","text":"<p>A key feature of Gini's economy is its incentive mechanisms that promote network participation and contribution without centralization risks. It includes merit-based rewards, equitable airdrops to ensure widespread network support, and a performance-based recognition system that aligns rewards with the ecosystem's qualitative contributions. Strategic token burns and lock-up periods are implemented to mitigate speculative behaviors and support token value appreciation over time.</p>"},{"location":"Introduction/Kalp-DLT/#identity-layer","title":"Identity Layer","text":"<p>The Identity Layer in Kalp Network provides a secure and reliable framework for verifying and managing user identities. This layer integrates the power of KYC (know your customer) Oracles with the established trust of third-party KYC providers like Authbridge and Sumsub. By leveraging this combined approach, the Kalp Network ensures that all participants within the ecosystem are thoroughly verified, fostering a high level of security and regulatory compliance.</p>"},{"location":"Introduction/Kalp-DLT/#kyc-oracles-with-trusted-3rd-party-kyc-providers","title":"KYC Oracles with Trusted 3rd Party KYC Providers","text":"<p>KYC Oracles serve as a tool between the Kalp Network and external KYC providers, ensuring that participant verification is both rigorous and streamlined. The oracles automate the verification process, retrieving and validating KYC/KYB data against the providers' databases, thus minimizing fraud risk and enhancing trust within the network.</p>"},{"location":"Introduction/Kalp-DLT/#public-key-whitelisting-through-kyc-verification","title":"Public Key Whitelisting Through KYC Verification","text":"<p>Upon successful KYC verification, the participant's public keys are whitelisted, a process that entails recording the public keys in a dedicated registry on Kalp\u2019s system chain. This whitelisting mechanism ensures that only verified participants can engage in transactions within the Kalp ecosystem, thereby maintaining a secure and compliant environment. The System Chain's universal accessibility across the Kalp ecosystem facilitates the seamless verification of these whitelisted keys across all chains, ensuring integrity and trust in interactions network-wide.</p>"},{"location":"Introduction/Kalp-DLT/#distributed-certificate-authority","title":"Distributed Certificate Authority","text":"<p>The Distributed Certificate Authority within the Kalp Network plays a crucial role in identity management, generating Kalp Identity, and handling the registration of the generated ECDSA public key, specifically using the curve P-256. This mechanism is central to the secure and private management of cryptographic keys within the ecosystem.</p> <p>The process of generating the key pair is designed to ensure the utmost security and privacy. Private keys are generated locally on the user's device, ensuring that they never leave the confines of the device, thereby mitigating the risk of exposure. The public key, derived from the private key, is then used to register the user within the Kalp network. This registration is a testament to the user's verified presence and readiness to interact within the ecosystem.</p>"},{"location":"Introduction/Kalp-DLT/#unified-private-key-interaction","title":"Unified Private Key Interaction","text":"<p>A distinguishing feature of the Kalp Network's identity layer is the use of a single private key to interact across all multi-chains within the ecosystem. This approach simplifies the user experience while maintaining high security and privacy standards, allowing for seamless interaction across the diverse landscape of the Kalp Network without compromising the user's control over their private keys.</p>"},{"location":"Introduction/Kalp-DLT/#execution-layer","title":"\u2699\ufe0f Execution Layer","text":"<p>The execution layer within the Kalp network is segregated from the consensus layer. This separation is strategically designed to optimize the computational efficiency of the network, enabling the parallel execution of smart contracts and transaction validation. Unlike traditional blockchain networks, where the execution and consensus mechanisms are intertwined, leading to potential bottlenecks in transaction finalization, the Kalp Network\u2019s architecture ensures that CPU resources are fully leveraged for execution tasks, thereby enhancing throughput and reducing latency.</p>"},{"location":"Introduction/Kalp-DLT/#segregation-for-enhanced-parallelization","title":"Segregation for Enhanced Parallelization","text":"<p>The execution layer's primary function is to execute smart contracts and validate transactions. This architectural choice of keeping the execution layer separate from other layers addresses one of the significant challenges faced by conventional blockchain systems: the bottleneck associated with linear transaction processing. In comparison to popular public and permissionless chains like Ethereum, where transaction execution can become a throughput bottleneck, the Kalp Network's approach significantly enhances efficiency and scalability.</p>"},{"location":"Introduction/Kalp-DLT/#peer-nodes-and-world-state-interaction","title":"Peer Nodes and World-State Interaction","text":"<p>Peer nodes within the Execution Layer play a pivotal role in interacting with the world state of Kalp chains. This interaction is crucial for ensuring that the state of the blockchain is consistently updated in accordance with the outcomes of executed smart contracts and validated transactions. Kalp\u2019s architectural flexibility further allows for the potential segregation of smart contract execution from peer nodes. This segregation not only enhances the system's capacity for parallel processing but also optimizes the allocation of computational resources, ensuring that smart contract execution and transaction validation can occur simultaneously without interference, thereby further boosting the network's performance capabilities.</p>"},{"location":"Introduction/Kalp-DLT/#kalp-sdk-facilitating-regulated-smart-contract-development","title":"Kalp SDK: Facilitating Regulated Smart Contract Development","text":"<p>The Kalp SDK is a tool for developers within the Kalp ecosystem, designed to foster the writing of regulated smart contracts. This toolkit provides developers with the means to interact seamlessly with the System Chain, facilitating interoperability, identity validation, and the creation of general-purpose smart contracts. By supporting multiple programming languages such as Golang, Node.js, Java, and Python, the Kalp SDK embodies the network\u2019s commitment to decentralization and inclusivity, removing potential barriers to developer engagement that a single-language framework might impose. This approach starkly contrasts with more monolithic blockchain ecosystems, which may limit developer accessibility and innovation due to language constraints.</p>"},{"location":"Introduction/Kalp-DLT/#kalp-compiler-ensuring-security-and-regulatory-compliance","title":"Kalp Compiler: Ensuring Security and Regulatory Compliance","text":"<p>The Kalp Compiler represents a groundbreaking fusion of recursive compilation techniques and AI-driven analysis, aimed at assisting developers in identifying and resolving security and regulatory compliance issues within smart contracts. This tool is not merely a gatekeeper but a facilitator of innovation, allowing for the deployment of smart contracts once semantic checks are satisfied. The Compiler's design philosophy underscores the Kalp Network\u2019s dedication to supporting the creation of smart contracts that can endure rigorous regulatory and legal examination. Unlike traditional compilers, which focus solely on syntactical correctness, the Kalp Compiler integrates components of the Kalp ecosystem to provide developers with a comprehensive toolset for crafting smart contracts capable of meeting the highest standards of security and compliance.</p>"},{"location":"Introduction/Kalp-DLT/#consensus-layer","title":"\ud83c\udfdb\ufe0f Consensus Layer","text":"<p>The consensus layer achieves transaction ordering and validation, ensuring the integrity and finality of transactions across the network. This layer is engineered to interact with the execution layer, thus facilitating a robust and secure process for transaction verification and block creation.</p>"},{"location":"Introduction/Kalp-DLT/#interaction-with-execution-layer","title":"Interaction with Execution Layer","text":"<p>The Consensus Layer's primary function is to provide a deterministic ordering of transactions, serving as a crucial intermediary between the submission of transactions and their execution. Through this process, the layer ensures that transactions are processed in a consistent manner, thereby preventing conflicts and forks, which ensures the integrity of the blockchain ledger. The deterministic nature of the consensus algorithms employed, such as SMART BFT, guarantees that once a transaction is validated by the Execution Layer, it is considered final and incorruptible.</p>"},{"location":"Introduction/Kalp-DLT/#deterministic-consensus-algorithms-smart-bft-for-public-chains-in-kalp","title":"Deterministic Consensus Algorithms: SMART BFT for Public Chains in Kalp","text":"<p>Kalp Network's Consensus Layer uses the SMART Byzantine Fault Tolerance (BFT) algorithm, a state-of-the-art consensus mechanism designed to provide high resilience against malicious activities while ensuring transaction finality. SMART BFT is characterized by its ability to handle adversarial conditions, making it particularly suited for public chains where the risk of malicious parties is significant. The algorithm's deterministic nature means that any block validated by the Execution Layer is assured of its correctness and finality, eliminating uncertainties and the possibility of forks within the Kalp chain.</p>"},{"location":"Introduction/Kalp-DLT/#pluggable-consensus-for-enterprises","title":"Pluggable Consensus for Enterprises","text":"<p>The Kalp Network adopts a modular approach to its consensus mechanisms, offering pluggable consensus options to cater to the diverse needs of its public and private chains.</p>"},{"location":"Introduction/Kalp-DLT/#raft-for-private-enterprise-chains","title":"RAFT for Private Enterprise Chains","text":"<p>Private enterprise chains within the Kalp Network typically utilize the RAFT consensus algorithm, prized for its efficiency and simplicity in controlled environments. However, enterprises seeking enhanced security features have the flexibility to opt for SMART BFT, benefiting from its advanced fault tolerance and attack resistance capabilities. This flexibility allows enterprise chains to tailor their consensus mechanism to their specific security requirements and operational preferences.</p>"},{"location":"Introduction/Kalp-DLT/#fork-less-architecture","title":"Fork-less Architecture","text":"<p>A distinctive feature of the Kalp Network is its fork-less architecture, a direct consequence of the deterministic consensus algorithms employed. This stability is crucial for maintaining trust and reliability across the network, especially for bringing financial instruments into the chain and ensuring that transactions and smart contracts execute as intended without the risk of chain reorganizations.</p>"},{"location":"Introduction/Kalp-DLT/#gateway-layer","title":"\ud83c\udf9f\ufe0f Gateway Layer","text":"<p>The Gateway Layer in the Kalp Network is conceived as a distributed architecture layer, pivotal in bolstering the security infrastructure of the network. This layer plays a critical role in safeguarding the identities of nodes, thereby introducing an additional stratum of protection against an array of cyber threats, including distributed denial of service (DDoS) and denial of service (DoS) attacks. By masking node identities and managing access controls, the Gateway Layer effectively mitigates the risk of targeted vulnerabilities, ensuring the integrity and availability of the Kalp Chains.</p>"},{"location":"Introduction/Kalp-DLT/#enhanced-security-through-anonymity","title":"Enhanced Security Through Anonymity","text":"<p>The Gateway Layer operates as a sophisticated cluster of nodes that intelligently routes transactions to appropriate chains within the ecosystem. This routing mechanism not only optimizes transaction flow for efficiency and speed but also enhances security by obfuscating the direct network paths to individual nodes. Such an approach is crucial in the contemporary digital landscape, where DDoS and DoS attacks present significant risks to the continuity and reliability of blockchain networks. The Gateway Layer\u2019s distributed nature further decentralizes the point of entry into the Kalp Network, complicating the efforts of potential attackers.</p>"},{"location":"Introduction/Kalp-DLT/#developer-friendly-interface","title":"Developer-Friendly Interface","text":"<p>A standout feature of the Gateway Layer is its provision of a RESTful interface, designed to streamline the development process by facilitating seamless integration and interaction with the Kalp ecosystem. Developers can leverage this interface to send signed transactions with ease, simplifying the deployment and execution of smart contracts and other blockchain operations.</p>"},{"location":"Introduction/Kalp-DLT/#privacy-and-security-assurance","title":"Privacy and Security Assurance","text":"<p>Importantly, the Gateway Layer is architecturally designed to never access or require users' private keys, ensuring that the custody of cryptographic assets remains squarely in the hands of the user. This design principle not only reinforces the security of the network but also empowers users with full control over their cryptographic credentials, aligning with the broader industry move towards self-sovereign identity and asset management.</p>"},{"location":"Introduction/Kalp-DLT/#self-custody-wallet","title":"Self-Custody Wallet","text":"<p>Integral to the user empowerment strategy of the Kalp Network is the Self-Custody Wallet, a tool that encapsulates the network\u2019s dedication to security, privacy, and user autonomy. This wallet is accompanied by a lightweight JavaScript library, streamlining the process of transaction signing and public-private key generation using the ECDSA P-256 curve. This cryptographic standard is selected for its balance of security and computational efficiency, ensuring robust protection for transactions while maintaining system performance.</p>"},{"location":"Introduction/Kalp-DLT/#transaction-signing-and-integration","title":"Transaction Signing and Integration","text":"<p>The Self-Custody Wallet allows users to sign transactions securely on their devices, after which the signed transactions can be transmitted to the Gateway Layer without exposing the private keys. This mechanism ensures that transactions are authenticated and non-repudiable while preserving the user's absolute control over their private keys. The wallet's integration with the Gateway Layer via its lightweight JS library exemplifies the seamless interplay between user-centric security tools and the broader Kalp Network infrastructure, enhancing the overall usability and security of the ecosystem.</p>"},{"location":"Introduction/Kalp-DLT/#permissioned-oracle-layer","title":"\u264a Permissioned Oracle Layer","text":"<p>The Kalp Network introduces a novel Permissioned Oracle Layer, a critical innovation designed to bridge the gap between off-chain data sources and the on-chain environment while rigorously maintaining the integrity and security intrinsic to permissioned blockchain systems. This layer is characterized by its reliance on whitelisted and verified data sources, ensuring that only trustworthy and authenticated information feeds into the Kalp ecosystem. The Permissioned Oracle Layer is engineered to offer flexible integration options, including direct integration with Kalp Chains or through sophisticated messaging systems like Kafka, catering to a variety of reliability and decentralization needs.</p>"},{"location":"Introduction/Kalp-DLT/#integration-flexibility-and-reliability","title":"Integration: Flexibility and Reliability","text":"<p>The layer's architecture permits two primary modes of data integration: through Kafka, which offers a robust and reliable message queue system ensuring data integrity and efficient handling of high-throughput data streams, or via direct blockchain integration for scenarios where real-time data transmission is paramount, albeit with a trade-off in terms of potential reliability due to the absence of a buffering message queue. This direct integration approach, while presenting a leaner architecture, leans more towards decentralization and user ownership, embodying the Kalp Network\u2019s ethos of fostering a user-centric and decentralized ecosystem.</p>"},{"location":"Introduction/Kalp-DLT/#decentralization-vs-reliability","title":"Decentralization vs. Reliability","text":"<p>The choice between Kafka integration and direct blockchain communication offers DApps developers the autonomy to tailor their applications according to specific use-case requirements. For applications where reliability and data integrity are non-negotiable, the Kafka route provides a failsafe mechanism, buffering data inputs and ensuring consistent delivery to the blockchain. Conversely, applications prioritizing decentralization and minimal reliance on intermediary layers may opt for direct blockchain integration, embracing a more distributed model of data ingestion.</p>"},{"location":"Introduction/Kalp-DLT/#chad-oracle-factory","title":"Chad Oracle Factory","text":"<p>Complementing the Permissioned Oracle Layer is the Chad Oracle Factory, an innovative tool designed to democratize Oracle creation, enabling users to generate custom oracles with minimal technical overhead. The factory utilizes a JSON-based Domain-Specific Language (DSL), allowing developers and users alike to define the logic and data sources for their oracles in a structured, intuitive format. This no-code tool significantly lowers the barrier to Oracle development, making it accessible to a broader audience and fostering a rich ecosystem of data feeds and smart contract interactions.</p>"},{"location":"Introduction/Kalp-DLT/#no-code-oracle-creation","title":"No-Code Oracle Creation","text":"<p>The Chad Oracle Factory is engineered to empower developers with varying levels of technical expertise to rapidly prototype and deploy oracles. By abstracting the complexities involved in Oracle development, the factory accelerates the integration of external data into the Kalp ecosystem, enhancing the functionality and versatility of DApps. The use of a JSON-based DSL for Oracle configuration offers a familiar and widely-used format, further easing the learning curve for new developers and non-technical users.</p>"},{"location":"Introduction/Kalp-DLT/#enhancing-smart-contract-interoperability","title":"Enhancing Smart Contract Interoperability","text":"<p>The introduction of the Chad Oracle Factory within the Permissioned Oracle Layer significantly enhances the interoperability and dynamic capabilities of smart contracts on the Kalp Network. By providing a streamlined, flexible tool for oracle creation, the Kalp Network ensures that smart contracts can reliably interact with a vast array of external data sources, opening up a multitude of possibilities for complex, real-world applications on the blockchain.</p>"},{"location":"Introduction/Kalp-DLT/#kalpify-regulated-tokenization-layer","title":"\u2696\ufe0f Kalpify: Regulated Tokenization Layer","text":"<p>The barriers to entry, illiquidity, opacity, and analog processes involved with real-world asset ownership and trading prevent democratized and efficient wealth creation. This restricts broad-based individual participation, restricts asset liquidity, drives up costs and effort through intermediaries, and creates mistrust due to a lack of transparency.</p> <p>Kalp has introduced a new platform called Kalpify that uses blockchain technology to solve the above problems. Kalpify facilitates fractional ownership and ensures regulatory adherence in asset trading. Kalpify provides a legally engineered tokenization platform that bridges real-world assets to the digital realm through a trustee model. The trustee legally binds ownership rights, enabling real assets to be fractionally owned and traded through tokens on the blockchain.</p> <p>This innovation not only augments liquidity in asset markets but also integrates the immutability of blockchain, ensuring secure and verifiable ownership for investors across the globe. With Kalpify, the investment landscape is redefined, embracing the convergence of asset tangibility and digital agility within a legally robust ecosystem. Kalpify performs critical off-chain work, including the linkage of digital asset tokens to legally binding agreements and compliance oversight. A key feature of Kalpify is its use of a network governance layer to generate and manage public and private key pairs for users, ensuring a high level of security and trust. This could make it possible for more people to invest in real-world assets and potentially make more money. Kalpify acts like a secure storage locker for people's investments and makes sure that all trades follow the law. It also uses special computer programs to link digital tokens to real-world contracts and to make sure that everything is done correctly. Another important feature is a system for managing security keys, which helps to keep people's investments safe.</p> <p></p>"},{"location":"Introduction/Kalp-DLT/#kalpify-regulated-tokenization-layer_1","title":"Kalpify: Regulated Tokenization Layer","text":"<p>Kalpify represents a comprehensive solution for the secure minting and management of digital asset tokens tied to real-world assets, offering a blend of blockchain innovation, rigorous security practices, and adherence to legal and regulatory standards. By integrating advanced cryptographic key management, smart contract automation, and stringent compliance measures, Kalpify ensures a secure, efficient, and compliant platform for digital asset minting and management.</p> <p>The trustee structure legally transfers ownership interests from physical assets to digital representations, maintaining compliance with regulations. This bridges the world of atoms and bits, unlocking liquidity while retaining enforceable property rights.</p>"},{"location":"Introduction/Kalp-DLT/#conclusion","title":"\ud83e\uddbe Conclusion","text":"<p>Kalp aims to bridge the gap between traditional finance and the innovative world of Web3 by offering a regulated and user-friendly environment for real-world asset (RWA) tokenization. Built around the Kalp DLT, Kalp's ecosystem empowers businesses and developers to leverage blockchain technology for secure and compliant RWA tokenization, fostering a more inclusive and stable financial future. This user-friendly approach, combined with the stability of RWA tokens and adherence to regulatory requirements, positions Kalp as a strong contender in the rapidly evolving blockchain landscape. While challenges like regulatory clarity and infrastructure interoperability exist, RWA tokenization through Kalp has the potential to unlock a new era of financial innovation and empowerment by democratizing access to investments and mitigating the volatility in conventional investment domains.</p>"},{"location":"Introduction/Kalp-studio-ecosystem/","title":"Kalp studio ecosystem","text":""},{"location":"Introduction/Kalp-studio-ecosystem/#kalp-studio-console-dashboard","title":"Kalp studio console dashboard","text":""},{"location":"Introduction/Kalp-studio-ecosystem/#introduction","title":"Introduction","text":"<p>Kalp studio console is a comprehensive dashboard designed to streamline the management and development of blockchain applications within the Kalp ecosystem. It provides an intuitive and user-friendly interface that allows users to efficiently access, manage, and subscribe to various products and services offered by Kalp Studio. This overview delves into the features and functionalities of the Kalp Studio Console, showcasing its role in enhancing the blockchain development experience.</p>"},{"location":"Introduction/Kalp-studio-ecosystem/#dashboard-components","title":"Dashboard Components","text":"<p>Dashboard Features:</p> <p>1 .  Dashboard:</p> <p></p> <ul> <li>Upon successful login, users land on the dashboard where they receive $500 worth of credits for subscribing to various products within the Kalp ecosystem.</li> </ul> <p></p> <ul> <li> <p>The dashboard includes a credits counter to view the current credit balance a notification bell for activity alerts, and a profile icon with options to manage account settings, or logout.</p> </li> <li> <p>Users can subscribe to products such as Smart Contracts, Payment Engine, Communication, Storage, and more directly from the dashboard.</p> </li> </ul> <p></p> <ul> <li>Social media links are provided for users to follow Kalp Studio updates.</li> </ul> <p>2 .  Billing:</p> <p></p> <ul> <li> <p>Users can view and manage subscriptions to multiple products. Each product\u2019s pricing model and subscription plans are detailed here.</p> </li> <li> <p>The billing page displays total billing, active subscriptions, upcoming renewals, and credit balance. Users can upgrade or renew their subscriptions directly from this module.</p> </li> <li> <p>Detailed subscription information includes product names, existing plan names and costs, subscription start dates, renewal dates, and options to upgrade or renew.</p> </li> </ul> <p>3 .  Credits:</p> <p></p> <ul> <li>The credits module shows the total credits available in the user\u2019s account. Users can add more credits when needed and view all transactions related to credits.</li> </ul> <p></p> <ul> <li>Users can manually enter the amount of credits they want to purchase through the \"Add Funds\" option.</li> </ul> <p>4 .  Docs (Documentation):</p> <p></p> <ul> <li> <p>This module provides access to technical documentation, release notes, and guides. It directs users to an external documentation page for detailed information.</p> </li> <li> <p>Users are directed to the documentation page at https://doc.kalp.studio/ for comprehensive guides and technical information.</p> </li> </ul> <p>5 . Wallet:</p> <p>The Kalp Wallet interface within Kalp Studio is designed to offer a seamless and user-friendly experience for managing digital assets. Here is a combined overview based on the provided screenshots:</p> <p>Initial Connection</p> <p></p> <p>Upon accessing the wallet section, users are prompted to connect a wallet to reflect their balance. A prominent \"+ Connect Wallet\" button is displayed, guiding users to establish a connection with their preferred wallet to start managing their assets.</p> <p>Wallet Selection</p> <p></p> <p>When connecting a wallet, users are presented with a selection interface that includes options to choose from popular wallet providers such as \"Socials,\" \"MetaMask,\" and \"Kalp Studio Wallet.\" There is also an option to create a new wallet by clicking the \"+ Create New Wallet\" button. This flexibility ensures that users can integrate the wallet service that best suits their needs.</p> <p>Wallet Management Dashboard</p> <p></p> <p>Once a wallet is connected, users are taken to the wallet management dashboard, which includes several key features:</p> <ul> <li>Wallet Balance: The dashboard prominently displays the current balance of the connected wallet. For example, a balance of 50 units of a token named \"CUSTOMAL\" is shown.</li> <li>Wallet Address: The unique address of the connected wallet is partially visible, allowing for easy reference while maintaining privacy.</li> <li>Transaction Management: The \"Transactions\" tab allows users to view and manage their transaction history. While no transactions are currently displayed, this section would typically list all transactions associated with the wallet.</li> <li>All Created Wallets: Users can access a tab that displays all wallets they have created, enhancing the organization and accessibility of multiple wallets.</li> <li>Create New Wallet: The option to create a new wallet is always available via a button at the top of the dashboard, enabling users to add and manage multiple wallets within Kalp Studio.</li> </ul> <p>Additional Features</p> <ul> <li>Open API: An \"Open API\" button suggests advanced functionality for developers or users needing to interact programmatically with their wallet.</li> <li>Help and Support: There is a \"Help and Support\" section to assist users with any issues or questions they may have while using the wallet interface.</li> </ul> <p>6 .  Help &amp; Support:</p> <p></p> <ul> <li> <p>This module offers multiple support options including phone support, email support, FAQs, support articles, and a ticketing system for raising grievances.</p> </li> <li> <p>Ensures users have access to necessary support and resources for effective use of Kalp Studio.</p> </li> <li> <p>Contact options include a phone number, email ID, links to FAQs, support articles, and a ticketing system to raise support tickets.</p> </li> </ul>"},{"location":"Introduction/Kalp-studio-ecosystem/#conclusion","title":"Conclusion","text":"<p>Kalp Studio Console is designed to streamline the management of blockchain applications and networks, offering an array of features that simplify user interaction with the Kalp ecosystem. With intuitive modules for billing, credits, documentation, and support, Kalp Studio Console enhances user experience, making it easier to build, manage, and scale decentralized applications. By providing a robust and scalable platform, Kalp Studio empowers developers and businesses to innovate and thrive in the blockchain space.</p>"},{"location":"Introduction/Kalp-studio-overview/","title":"Kalp studio overview","text":""},{"location":"Introduction/Kalp-studio-overview/#kalp-studio-overview","title":"Kalp Studio Overview","text":"<p>Kalp Studio is a decentralized infrastructure platform designed to build, manage, and scale blockchain applications and networks. It serves as a comprehensive ecosystem for developers, offering a wide range of tools and services that simplify the complexities of blockchain technology, making it more accessible and efficient.</p>"},{"location":"Introduction/Kalp-studio-overview/#introduction","title":"Introduction","text":"<p>In the rapidly evolving world of blockchain technology, there is a growing need for platforms that can streamline the development process, provide robust management tools, and scale to meet the demands of enterprise-level applications. Kalp Studio addresses this need by offering a user-friendly and scalable platform that empowers developers to build sophisticated blockchain applications without the hassle of managing the underlying infrastructure. By drawing parallels to how AWS revolutionized cloud computing for Web 2.0, Kalp Studio aims to do the same for Web 3.0 technologies.</p>"},{"location":"Introduction/Kalp-studio-overview/#about-kalp-studio","title":"About Kalp Studio","text":"<p>Kalp Studio is the leading blockchain infrastructure platform, powering millions of users worldwide. Our team of engineers, designers, and visionaries is dedicated to solving complex problems and creating a superior user experience in the blockchain world.</p> <p></p>"},{"location":"Introduction/Kalp-studio-overview/#simple-and-scalable","title":"Simple and Scalable","text":"<p>Kalp Studio is designed to be the go-to platform for blockchain development, much like AWS, GCP, and Microsoft Azure dominate the cloud computing space. It offers a seamless and scalable environment where developers can build a wide range of blockchain applications and networks without worrying about the underlying infrastructure.</p>"},{"location":"Introduction/Kalp-studio-overview/#empowering-developers","title":"Empowering Developers","text":"<p>Kalp Studio provides a comprehensive suite of tools and services tailored to the needs of blockchain developers. This includes everything from smart contract libraries and SDKs to APIs and compliance features. By removing the complexities of blockchain development, Kalp Studio enables developers to focus on innovation and build applications that can scale and perform at an enterprise level.</p>"},{"location":"Introduction/Kalp-studio-overview/#focus-on-user-experience","title":"Focus on User Experience","text":"<p>A key aspect of Kalp Studio is its emphasis on user experience. The platform is designed to be intuitive and accessible, making blockchain development more efficient. This focus on usability ensures that developers of all skill levels can leverage the full potential of the platform.</p>"},{"location":"Introduction/Kalp-studio-overview/#kalp-studio-vs-kalp-dlt","title":"Kalp Studio vs. Kalp DLT","text":"<p>Kalp Studio is akin to Amazon AWS for Web 2.0, providing all the necessary tools and services for developers to build and deploy applications with ease. In contrast, Kalp DLT is the world's first fully regulated blockchain specifically designed for Real World Asset (RWA) ecosystems. This distinction allows developers to build secure, compliant, and efficient decentralized applications that bridge the gap between traditional finance and the blockchain world. Through Kalp Studio, users can deploy smart contracts on Kalp DLT, leveraging its regulatory compliance and security features.</p>"},{"location":"Introduction/Kalp-studio-overview/#target-audience","title":"Target Audience","text":""},{"location":"Introduction/Kalp-studio-overview/#learning-and-exploration","title":"Learning and Exploration","text":"<ul> <li>Students / Blockchain Enthusiasts: Kalp Studio\u2019s drag-and-drop UI builder and pre-built components are ideal for those new to blockchain development. The user-friendly interface allows for experimentation and learning without needing extensive coding knowledge.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#development-and-innovation","title":"Development and Innovation","text":"<ul> <li>Blockchain Developers: The platform caters to experienced developers by providing a comprehensive suite of tools and functionalities, including audited smart contract libraries, SDKs, and APIs. These features empower developers to build complex and secure blockchain applications efficiently.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#expertise-and-guidance","title":"Expertise and Guidance","text":"<ul> <li>Subject Matter Experts (SMEs): SMEs can leverage Kalp Studio to build custom solutions for their clients, with the platform\u2019s scalability and compliance features making it particularly attractive for enterprise-grade applications.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#business-implementation","title":"Business Implementation","text":"<ul> <li>IT and Software Service Companies: These companies can utilize Kalp Studio to offer blockchain development services to their clients, with the platform\u2019s pre-built components and faster MVP launch capabilities ensuring efficient project delivery.</li> <li>Enterprise-grade IT Service Providers: The secure and scalable infrastructure of Kalp Studio makes it suitable for building enterprise-level blockchain applications, addressing the regulatory needs of large organizations.</li> <li>SaaS Software Companies: SaaS companies can leverage Kalp Studio\u2019s infrastructure to build and deploy blockchain-powered features within their existing software offerings, accommodating growth and handling increasing user demands.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#features-advantages","title":"Features Advantages","text":""},{"location":"Introduction/Kalp-studio-overview/#rapid-development-and-deployment","title":"Rapid Development and Deployment","text":"<ul> <li>Drag and Drop UI Builder: Build user interfaces for blockchain applications quickly and easily, reducing development time and resources.</li> <li>Faster MVP Launch: Simplify development with pre-built components, allowing for quicker validation of concepts and gathering of user feedback.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#versatility-and-manageability","title":"Versatility and Manageability","text":"<ul> <li>Public and Private Chain Management: Build on both public and private blockchains, giving control over the privacy and security of applications.</li> <li>Audited Smart Contract Libraries: Pre-built, secure libraries reduce development time and minimize the risk of errors.</li> <li>SDK &amp; APIs: Integrate Kalp Studio\u2019s functionalities into existing applications seamlessly.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#security-and-scalability","title":"Security and Scalability","text":"<ul> <li>Compliances: Ensure applications adhere to relevant regulations.</li> <li>Security: Protect applications and user data.</li> <li>24x7 Support: Access support whenever needed.</li> <li>Flexible Pricing (Pay as You Go): Scale costs efficiently as projects grow.</li> </ul>"},{"location":"Introduction/Kalp-studio-overview/#conclusion","title":"Conclusion","text":"<p>Kalp Studio is dedicated to simplifying and enhancing the developer experience within the blockchain ecosystem. By providing a robust and scalable platform that bridges the gap from Web 2.0 to Web 3.0, Kalp Studio empowers developers to innovate and build sophisticated blockchain applications efficiently. With a focus on user experience, comprehensive tools, and secure infrastructure, Kalp Studio stands out as a leading platform in the decentralized infrastructure space.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/","title":"What is smart contract deployer","text":""},{"location":"Introduction/What-is-kalp-instant-deployer/#kalp-instant-deployer-kid-overview","title":"Kalp Instant Deployer (KID) Overview","text":"<p>Kalp Instant Deployer (KID) is a powerful service designed to streamline and automate the deployment of smart contracts across multiple blockchain networks. KID simplifies the deployment process, providing real-time status tracking and ensuring secure and efficient contract management. This overview highlights the key features, processes, and benefits of the Kalp Instant Deployer.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#key-features","title":"Key Features","text":""},{"location":"Introduction/What-is-kalp-instant-deployer/#simplified-deployment-process","title":"Simplified Deployment Process","text":"<p>KID abstracts the complexities of smart contract deployment, making it accessible for both technical and non-technical users. By automating the deployment steps, users can focus on their contract logic without worrying about the deployment intricacies.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#multi-blockchain-support","title":"Multi-Blockchain Support","text":"<p>KID supports deploying smart contracts on various blockchain networks, including: - Ethereum - Polygon - Avalanche - Optimism - Arbitrum - Fantom - Solana - Binance Smart Chain (BSC) - Kalptantra (proprietary blockchain)</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#real-time-status-tracking","title":"Real-Time Status Tracking","text":"<p>After initiating a deployment, users can track the status of their smart contracts in real time. A transaction hash is provided, which is used to monitor the progress and confirm the successful deployment of the contract.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#token-and-subscription-validation","title":"Token and Subscription Validation","text":"<p>Each deployment request includes a bearer token. KID validates the token and checks the user's subscription status to ensure they have the necessary permissions and active subscriptions to use the service.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#detailed-process","title":"Detailed Process","text":""},{"location":"Introduction/What-is-kalp-instant-deployer/#token-and-subscription-validation_1","title":"Token and Subscription Validation","text":"<p>Each deployment request must include a bearer token. The validation process involves: - Token Reception: The bearer token is received with the deployment request. - Validation Service: The token is sent to a validation service to verify its validity and the user's subscription status. - Proceed or Reject: If the token is valid and the subscription is sufficient, the request proceeds. Otherwise, it is rejected.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#contract-identification","title":"Contract Identification","text":"<p>After validating the token and subscription, the service identifies the type of smart contract: - Contract Verification: Determines whether the uploaded smart contract is EVM-based (Ethereum Virtual Machine) or Kalptantra-based. - Contract Handling: Handles the contract appropriately based on its type for deployment.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#sending-deployment-request","title":"Sending Deployment Request","text":"<p>Once the contract type is identified, the deployment process begins: - Request Formation: Formulates a request to the wallet service with the contract details. - Deployment Request: Sends the request to the wallet service for deployment. - Transaction Hash: The wallet service deploys the smart contract and provides a transaction hash for tracking.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#status-tracking-via-cron-job","title":"Status Tracking via Cron Job","text":"<p>KID includes a cron job mechanism for regular status updates: - Cron Job Execution: A cron job runs at specified intervals (e.g., every minute). - Fetch Status: The cron job fetches the status of all pending smart contracts using the transaction hash. - Update Response: Updates the status information in the response database or system accordingly.</p>"},{"location":"Introduction/What-is-kalp-instant-deployer/#benefits","title":"Benefits","text":"<ul> <li>Efficiency: Automates and simplifies the deployment process, saving time and reducing manual errors.</li> <li>Accessibility: Makes smart contract deployment accessible to a wider audience, including those with limited technical expertise.</li> <li>Security: Ensures secure deployment through token validation and secure communication channels.</li> <li>Real-Time Updates: Provides real-time status updates, keeping users informed about the progress of their deployments.</li> </ul>"},{"location":"Introduction/What-is-kalp-instant-deployer/#conclusion","title":"Conclusion","text":"<p>Kalp Instant Deployer (KID) is a robust tool that enhances the efficiency and accessibility of deploying smart contracts. By automating the deployment process, supporting multiple blockchain networks, and providing real-time status tracking, KID offers a comprehensive solution for developers and users seeking to deploy smart contracts quickly and securely.</p>"},{"location":"Introduction/What-is-kalp-studio-wallet/","title":"What is kalp studio wallet","text":""},{"location":"Introduction/What-is-kalp-studio-wallet/#kalp-studio-wallet-overview","title":"Kalp Studio Wallet Overview","text":"<p>Kalp studio wallet is an advanced, versatile cryptocurrency wallet designed to support multiple blockchain networks and cater to a wide range of user needs and security preferences. It provides users with seamless and secure management of their digital assets through various wallet types, including Self-Custodial, Custodial, and MPC (Multi-Party Computation) wallets. This overview highlights the key features, supported networks, wallet types, and core functionalities of the Kalp studio wallet.</p>"},{"location":"Introduction/What-is-kalp-studio-wallet/#key-features","title":"Key Features","text":"<ul> <li>Multi-Blockchain Support: Kalp studio wallet supports a variety of blockchain networks, including Ethereum, Polygon, Avalanche, Optimism, Arbitrum, Fantom, Solana, Binance Smart Chain (BSC), and the proprietary Kalp Tantra blockchain.</li> <li>Diverse Wallet Options: Users can choose from Self-Custodial, Custodial, and MPC wallets, each offering different levels of control and security.</li> <li>Secure Transaction Signing: The wallet supports signing transactions for various function types, ensuring secure interactions with supported blockchains.</li> <li>Smart Contract Deployment: Kalp studio wallet facilitates the deployment of smart contracts on supported blockchains, providing a streamlined process for developers.</li> <li>API Integration: The wallet offers an Open API system for programmatic interaction, enabling developers to integrate kalp studio wallet services into their applications.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#supported-blockchain-networks","title":"Supported Blockchain Networks","text":"<p>Kalp studio wallet supports the following blockchain networks:</p> <ul> <li>Ethereum</li> <li>Polygon</li> <li>Avalanche</li> <li>Optimism</li> <li>Arbitrum</li> <li>Fantom</li> <li>Solana</li> <li>Binance Smart Chain (BSC)</li> <li>Kalp DLT (proprietary blockchain)</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#wallet-types","title":"Wallet Types","text":""},{"location":"Introduction/What-is-kalp-studio-wallet/#self-custodial-wallet","title":"Self-Custodial Wallet","text":"<p>The Self-Custodial wallet gives users full control over their funds and private keys. It is ideal for advanced users who understand the responsibilities of self-custody.</p> <ul> <li>User Control: Users manage their own private keys and seed phrases.</li> <li>Security: No sensitive information is stored on the backend.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#custodial-wallet","title":"Custodial Wallet","text":"<p>The Custodial wallet offers a more user-friendly experience by managing private keys on behalf of the user. It is suitable for users who prefer convenience and ease of use.</p> <ul> <li>Managed Keys: Private keys are generated and managed by the Kalp studio wallet service.</li> <li>Encryption: Private keys are encrypted and securely stored in both the database and a secure vault.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#mpc-wallet","title":"MPC Wallet","text":"<p>The MPC (Multi-Party Computation) wallet provides a balance between security and usability by distributing key ownership between the user and the service.</p> <ul> <li>Distributed Keys: The private key is divided into three parts (shards) using Shamir's Secret Sharing.</li> <li>Authentication: Authentication is performed using phone, email, and Google Auth.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#core-functionalities","title":"Core Functionalities","text":""},{"location":"Introduction/What-is-kalp-studio-wallet/#transaction-signing","title":"Transaction Signing","text":"<p>Kalp studio wallet supports signing transactions for various function types across supported blockchains, ensuring secure and authenticated interactions.</p> <ul> <li>Supported Function Types: View, Pure, Payable, and Non-payable functions.</li> <li>Secure Signing: Transactions are signed using the appropriate wallet type, ensuring security.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#smart-contract-deployment","title":"Smart Contract Deployment","text":"<p>Kalp studio wallet facilitates the deployment of smart contracts on supported blockchains, providing a streamlined process for developers.</p> <ul> <li>Supported File Types: Solidity (.sol) files for EVM-compatible blockchains and ZIP files for Kalp Tantra code deployment.</li> <li>Deployment Process: The service compiles and processes the code, signs the deployment transaction, and broadcasts it to the selected blockchain network.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#api-integration","title":"API Integration","text":"<p>Kalp studio wallet offers an Open API system that allows users to interact with wallet services programmatically.</p> <ul> <li>API Key Management: Each user is assigned a unique API key for authentication.</li> <li>Secure Communication: API keys and tokens provide secure and authenticated access to Kalp studio wallet services.</li> </ul>"},{"location":"Introduction/What-is-kalp-studio-wallet/#conclusion","title":"Conclusion","text":"<p>Kalp studio wallet is a comprehensive and secure cryptocurrency wallet service designed to meet the diverse needs of users and developers. With its support for multiple blockchain networks, various wallet types, and robust security features, Kalp studio wallet is well-positioned to provide a seamless and secure experience for managing digital assets.</p>"},{"location":"Release-notes/release-version-1.0.0/release-notes-version-1.0.0/","title":"Release notes version 1.0.0","text":""},{"location":"Release-notes/release-version-1.0.0/release-notes-version-1.0.0/#release-notes-kalp-studio-version-10","title":"Release Notes - Kalp studio Version 1.0","text":""},{"location":"Release-notes/release-version-1.0.0/release-notes-version-1.0.0/#introduction","title":"Introduction","text":"<p>This update marks the official launch of Kalp Studio (Version 1.0)! We've introduced a suite of features to streamline the user experience.</p>"},{"location":"Release-notes/release-version-1.0.0/release-notes-version-1.0.0/#release-summary","title":"Release Summary","text":"<p>Product Name</p> <p>Kalp Studio</p> <p>Release version</p> <p>v1.0.0</p> <p>Build Number</p> <p>1.10.13</p> <p>Release Date</p> <p>April 03, 2024</p>"},{"location":"Release-notes/release-version-1.0.0/release-notes-version-1.0.0/#release-features","title":"Release Features","text":"<ul> <li> <p>User Management:</p> <ul> <li> <p>Onboarding: Streamlined account creation process for individual developers.</p> </li> <li> <p>Subscription Model: Platform access requires a subscription (details forthcoming).</p> </li> <li> <p>Notifications: Integration with a notification engine for receiving platform updates.</p> </li> </ul> </li> <li> <p>Security:</p> <ul> <li> <p>User Verification: Mandatory identity and KYC (Know Your Customer) verification for user accounts, including KALP ID integration.</p> <ul> <li> <p>KYC - KYC process for user verification.</p> </li> <li> <p>KALP ID - Secure and unique KALP IDs for each user with an integrated wallet for both the testnet and mainnet.</p> </li> </ul> </li> </ul> </li> <li> <p>Kalp Wallet (Testnet):</p> <ul> <li> <p>Testnet Wallets: Secure wallets for managing assets within the testnet environment.</p> </li> <li> <p>Free Testnet Credits: 100 free credits are provided for testnet exploration.</p> </li> <li> <p>Payment Integration: Functionality for adding funds to wallets through the payment engine (details forthcoming).    </p> </li> </ul> </li> <li> <p>Project and Smart Contract Management:</p> <ul> <li> <p>Project Creation: Ability to create projects for organizing and managing smart contracts.</p> </li> <li> <p>Smart Contract Lifecycle: Create, deploy, and manage smart contracts on the testnet.</p> </li> <li> <p>Automatic API Endpoints: Automatic generation of API endpoints for deployed smart contracts.</p> </li> <li> <p>Transaction Monitoring: Monitor transactions associated with deployed smart contracts.</p> </li> <li> <p>Pre-built Templates: Pre-built smart contract templates for common standards (ERC-721, ERC-1155, ERC-20).</p> </li> </ul> </li> <li> <p>Transaction Monitoring: Keep track of your transactions for complete transparency.</p> </li> <li> <p>API Access &amp; Security</p> <ul> <li>API Key Generation: Functionality to generate API authentication keys to interact with deployed contracts.</li> </ul> </li> </ul>"},{"location":"Release-notes/release-version-1.0.0/release-notes-version-1.0.0/#support-and-feedback","title":"Support and Feedback","text":"<p>Get the most out of Kalp Studio with our library of informative Support Articles and FAQs. They'll guide you through every step, from onboarding to advanced functionalities, ensuring a smooth and successful development experience.</p> <p>We value your feedback and encourage you to share any suggestions or report any issues you encounter. Please reach out to our support team at care@kalp.studio.</p>"},{"location":"Release-notes/release-version-1.1.0/release-notes-version-1.1.0/","title":"Release notes version 1.1.0","text":""},{"location":"Release-notes/release-version-1.1.0/release-notes-version-1.1.0/#release-notes-kalp-studio-version-110","title":"Release Notes - Kalp studio Version 1.1.0","text":""},{"location":"Release-notes/release-version-1.1.0/release-notes-version-1.1.0/#introduction","title":"Introduction","text":"<p>Having released kalp studio version 1.0.0 successfully, we are bringing the following changes into version 1.1.0, which will improve and stabilize kalp studio user experience with this release.</p>"},{"location":"Release-notes/release-version-1.1.0/release-notes-version-1.1.0/#kalp-studio-release-summary","title":"Kalp studio release summary","text":"<p>Product Name</p> <p>Kalp Studio</p> <p>Launch Date</p> <p>19 April, 2024</p> <p>Release Version</p> <p>V1.1.0</p> <p>Build Number</p> <p>1.1.0</p>"},{"location":"Release-notes/release-version-1.1.0/release-notes-version-1.1.0/#new-features-and-improvements","title":"New Features and Improvements","text":"<ul> <li> <p>Removing KYC from TestNet - To reduce entry barriers, we have removed the Know Your Customer (KYC) verification requirement for users operating on the TestNet environment. In the previous version Just to deploy smart contract, KYC was mandatory.</p> </li> <li> <p>UI Changes - Implemented UI changes to improve usability and aesthetics across the Kalp Studio platform. These enhancements include a more intuitive layout, improved navigation, and updated visual elements designed to provide a more user-friendly experience.</p> </li> <li> <p>Maintaining request access for main net - To ensure security and compliance on our MainNet environment, access will continue to be controlled through a request process on Kalp studio platform.</p> </li> <li> <p>Pricing plan changes in the webapp of Kalp studio - We have updated our pricing plans to better align with the needs of our diverse user base. The new plans are designed to be more flexible, allowing developers to choose options that best fit their project scales and durations.</p> </li> </ul> <p>Following are the changes for pricing in the Subscription Model for kalp studio.</p> <ol> <li> <p>Student- $0/month</p> </li> <li> <p>Developer- $19/month</p> </li> <li> <p>Business- $49/month</p> </li> </ol>"},{"location":"Release-notes/release-version-1.1.0/release-notes-version-1.1.0/#support-and-feedback","title":"Support and Feedback","text":"<p>Get the most out of Kalp Studio with our library of informative  Support Articles. They'll guide you through every step, from onboarding to advanced functionalities, ensuring a smooth and successful development experience.</p> <p>We value your feedback and encourage you to share any suggestions or report any issues you encounter, Raise a ticket at - care@kalp.studio.</p> <p>We look forward to your continued support as we work towards a stable and feature-rich release.</p>"},{"location":"Release-notes/release-version-1.1.1/release-notes-version-1.1.1/","title":"Release notes version 1.1.1","text":""},{"location":"Release-notes/release-version-1.1.1/release-notes-version-1.1.1/#release-notes-kalp-studio-version-111","title":"Release Notes - Kalp studio Version 1.1.1","text":""},{"location":"Release-notes/release-version-1.1.1/release-notes-version-1.1.1/#introduction","title":"Introduction","text":"<p>Having released kalp studio version 1.0 &amp; 1.1.0 successfully, we are bringing the following changes into version 1.1.1, which is patch release for kalp studio.</p>"},{"location":"Release-notes/release-version-1.1.1/release-notes-version-1.1.1/#kalp-studio-release-summary","title":"Kalp studio release summary","text":"<p>Product Name</p> <p>Kalp Studio</p> <p>Launch Date</p> <p>25 April, 2024</p> <p>Release Version</p> <p>V1.1.1</p> <p>Build Number</p> <p>1.11.4</p>"},{"location":"Release-notes/release-version-1.1.1/release-notes-version-1.1.1/#improvements","title":"Improvements","text":"<ul> <li> <p>Main Net Access Request: Users can now request access to the Main Net directly from the network selection page while deploying smart contracts.</p> </li> <li> <p>Super Admin Endpoint Updates: We've implemented minor fixes and updates across multiple endpoints for super administrators.</p> </li> <li> <p>Admin Request for Main Net via Email: To streamline access requests to kalp studio main net, users can now send an email directly to the system administrator to request access to the Main Net.</p> </li> </ul>"},{"location":"Release-notes/release-version-1.1.1/release-notes-version-1.1.1/#support-and-feedback","title":"Support and Feedback","text":"<p>Get the most out of Kalp Studio with our library of informative  Support Articles. They'll guide you through every step, from onboarding to advanced functionalities, ensuring a smooth and successful development experience.</p> <p>We value your feedback and encourage you to share any suggestions or report any issues you encounter, Raise a ticket at - care@kalp.studio.</p> <p>We look forward to your continued support as we work towards a stable and feature-rich release.</p>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/","title":"Release notes version 2.0.0","text":""},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#release-notes-kalp-studio-version-200","title":"Release notes - Kalp studio version 2.0.0","text":""},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#introduction","title":"Introduction","text":"<p>Welcome to the latest release of the Kalp Studio Console Dashboard. This update includes significant improvements and new features across various modules to enhance user experience and streamline blockchain and decentralized application development. Below is a detailed, module-wise breakdown of the new features and improvements.</p>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#new-features","title":"New Features","text":""},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#onboarding","title":"Onboarding","text":"<ul> <li>Streamlined Sign-Up Process: New users can now enjoy a more intuitive and faster registration process with clear instructions and prompts.</li> <li>$50 Onboarding Credit: Every new user receives a complimentary $50 credit to explore and utilize Kalp Studio\u2019s features.</li> <li>Verification Steps: Enhanced email verification and OTP validation for secure account setup.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#dashboard","title":"Dashboard","text":"<ul> <li>Centralized Overview: The redesigned dashboard provides a comprehensive overview of user activities, credit balances, and quick access to key features.</li> <li>Quick Actions: Added quick action buttons for frequently used functions such as connecting wallets, building smart contracts, and accessing community resources.</li> <li>Enhanced Navigation: Improved sidebar navigation with clear labels and icons for easy access to different sections.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#billing","title":"Billing","text":"<ul> <li>Pay-As-You-Go Model: Transparent and flexible billing system allowing users to pay only for the services they use.</li> <li>Billing Summary: New billing summary section displaying total bill due, due dates, active subscriptions, and upcoming renewals.</li> <li>Subscription Management: Easy access to manage, upgrade, or renew subscription plans directly from the billing page.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#credits","title":"Credits","text":"<ul> <li>Credit Management: Enhanced interface for viewing and managing credits, including a detailed transaction summary.</li> <li>Add Credits: Simplified process for adding credits with real-time currency conversion and transaction confirmation.</li> <li>Credit Overview: Clear display of total credits available and recent credit activities.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#wallets","title":"Wallets","text":"<ul> <li>Wallet Integration: Seamless integration with various wallet providers, including self-custody, custodial, and MPC wallets.</li> <li>Wallet Management: Enhanced wallet management features including viewing balances, transaction histories, and disconnecting wallets.</li> <li>Connect Wallet: Simplified process to connect and configure new wallets with detailed instructions and secure seed phrase handling.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#kalp-instant-deployer","title":"Kalp Instant Deployer","text":"<ul> <li>Smart Contract Deployment: Streamlined process for creating and deploying smart contracts using the instant deployer tool.</li> <li>Template Selection: New pre-built templates available for quick deployment of various smart contract types (e.g., NFT, Token, DEX, DAO).</li> <li>File Uploads: Enhanced support for uploading extension files with confirmation messages and the ability to re-upload if needed.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#api-gateway","title":"API Gateway","text":"<ul> <li>API Management: Comprehensive API management interface allowing users to create, manage, and monitor API endpoints.</li> <li>Subscription Plans: Various subscription plans available, including Free, Starter, Pro, and Business, tailored to different team sizes and needs.</li> <li>Endpoint Generation: Simplified process for generating and viewing API endpoints with detailed parameter information.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#api-key-generation","title":"API Key Generation","text":"<ul> <li>Key Creation: Easy creation of new API keys with customizable names and descriptions.</li> <li>Key Management: Centralized management of API keys including activation, deactivation, and viewing usage statistics.</li> <li>Security: Enhanced security measures for API keys to ensure safe and controlled access to services.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#transaction-monitoring","title":"Transaction Monitoring","text":"<ul> <li>Real-Time Monitoring: Advanced transaction monitoring features providing real-time updates on transaction statuses.</li> <li>Detailed Views: Comprehensive views of transaction details including transaction IDs, block IDs, function types, hashes, and statuses.</li> <li>Subscription Activation: Easy activation of the transaction monitoring service with clear subscription options.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#settings","title":"Settings","text":"<ul> <li>KYC Management: Enhanced KYC management interface allowing users to start and monitor their KYC status.</li> <li>Template Management: Simplified management of purchased templates with options to download and utilize them in projects.</li> </ul>"},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#improvements","title":"Improvements","text":""},{"location":"Release-notes/release-version-2.0.0/release-notes-version-2.0.0/#new-user-interface","title":"New User Interface","text":"<ul> <li>Enhanced UI Design: A completely revamped user interface for a more modern and intuitive user experience.</li> <li>Responsive Design: Improved responsiveness for better usability across different devices and screen sizes.</li> <li>Visual Consistency: Consistent visual elements and icons across all modules for a cohesive look and feel.</li> </ul> <p>We value your feedback and encourage you to share any suggestions or report any issues you encounter, Raise a ticket at - care@kalp.studio.</p> <p>We look forward to your continued support as we work towards a stable and feature-rich release.</p>"}]}